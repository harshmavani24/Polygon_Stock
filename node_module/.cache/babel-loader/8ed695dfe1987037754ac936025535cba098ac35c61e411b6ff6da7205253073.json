{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\polygon_without_ws\\\\stock-tracker\\\\src\\\\components\\\\StockTracker.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { Line, Bar } from 'react-chartjs-2';\n// // import 'chart.js/auto'; // Required for chart.js\n\n// // const StockTracker = () => {\n// //   const [symbol, setSymbol] = useState('');\n// //   const [priceData, setPriceData] = useState([]);\n// //   const [volumeData, setVolumeData] = useState([]);\n// //   const [contractData, setContractData] = useState([]);\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and dollar amount\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n// //     fetchStockData(symbol);\n// //   };\n\n// //   const fetchStockData = async (symbol) => {\n// //     try {\n// //       const now = new Date();\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n\n// //       // Convert to YYYY-MM-DD format as required by Polygon API\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0]; \n// //       const toDate = now.toISOString().split('T')[0]; \n\n// //       // Fetch stock price data\n// //       const priceResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-22?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       console.log(\"Price Response\",priceResponse.data.results);\n// //       setPriceData(priceResponse.data.results || []); // Update your price data state\n\n// //       // Fetch volume data for the closest expiry date\n// //       const volumeResponse = await axios.get(\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n// //       console.log(volumeResponse.data.results);\n\n// //       setVolumeData(volumeResponse.data.results || []); // Update your volume data state\n// //     } catch (error) {\n// //       if (error.response && error.response.status === 429) {\n// //         // Handle rate limiting (Too Many Requests)\n// //         console.error(\"Rate limit exceeded. Please wait or upgrade your subscription.\");\n\n// //         // Implement a retry after a delay (e.g., 60 seconds)\n// //         setTimeout(() => {\n// //           fetchStockData(symbol); // Retry fetching data after 60 seconds\n// //         }, 6000); // Wait 60 seconds before retrying\n// //       } else {\n// //         console.error('Error fetching stock data:', error);\n// //       }\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (symbol) {\n// //       const interval = setInterval(() => {\n// //         fetchStockData(symbol);\n// //       }, 5000); // Fetch every second\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [symbol]);\n\n// //   const priceChart = {\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Stock Price',\n// //         data: priceData.map((entry) => entry.c),\n// //         fill: false,\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\n// //         borderColor: 'rgba(75,192,192,1)',\n// //       },\n// //     ],\n// //   };\n\n// //   const volumeChart = {\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Call Volume',\n// //         data: volumeData.map((entry) => entry.call_volume),\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n// //         borderColor: 'rgba(54, 162, 235, 1)',\n// //         borderWidth: 1,\n// //       },\n// //       {\n// //         label: 'Put Volume',\n// //         data: volumeData.map((entry) => entry.put_volume),\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n// //         borderColor: 'rgba(255, 99, 132, 1)',\n// //         borderWidth: 1,\n// //       },\n// //     ],\n// //   };\n\n// //   return (\n// //     <div>\n// //       <form onSubmit={handleSubmit}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter Stock Symbol\"\n// //           value={symbol}\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n// //         />\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n\n// //       {priceData.length > 0 && (\n// //         <>\n// //           <h2>{symbol} Stock Price</h2>\n// //           <Line data={priceChart} />\n// //         </>\n// //       )}\n\n// //       {volumeData.length > 0 && (\n// //         <>\n// //           <h2>Volume Data</h2>\n// //           <Bar data={volumeChart} />\n// //         </>\n// //       )}\n\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n// //       </button>\n// //     </div>\n// //   );\n// // };\n\n// // export default StockTracker;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { Line, Bar } from 'react-chartjs-2';\n// // import 'chart.js/auto'; // Required for chart.js\n\n// // const StockTracker = () => {\n// //   const [symbol, setSymbol] = useState('');\n// //   const [priceData, setPriceData] = useState([]);\n// //   const [volumeData, setVolumeData] = useState([]);\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n// //     fetchStockData(symbol);\n// //   };\n\n// //   const fetchStockData = async (symbol) => {\n// //     try {\n// //       const now = new Date();\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n// //       const toDate = now.toISOString().split('T')[0];\n\n// //       // Fetch stock price data\n// //       const priceResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-20?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setPriceData(priceResponse.data.results || []);\n\n// //       // Fetch volume data for the closest expiry date\n// //       const volumeResponse = await axios.get(\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setVolumeData(volumeResponse.data.results || []);\n\n// //     //   // Fetch Greeks (Delta, Gamma, Vega) and Strike Prices for options 10 above/below\n// //     //   const strikeResponse = await axios.get(\n// //     //     `https://api.polygon.io/v1/reference/options/greeks/${symbol}?apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //     //   );\n\n// //     //   setStrikeData(strikeResponse.data.results || []);\n\n// //     } catch (error) {\n// //       console.error('Error fetching stock data:', error);\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (symbol) {\n// //       const interval = setInterval(() => {\n// //         fetchStockData(symbol);\n// //       }, 1000); // Fetch every second\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [symbol]);\n\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n// //   const priceChart = {\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Stock Price',\n// //         data: priceData.map((entry) => entry.c),\n// //         fill: false,\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\n// //         borderColor: 'rgba(75,192,192,1)',\n// //       },\n// //     ],\n// //   };\n\n// //   const volumeChart = {\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleDateString()), // Using date for better accuracy\n// //     datasets: [\n// //       {\n// //         label: 'Call Volume',\n// //         data: volumeData.map((entry) => \n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume),\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n// //         borderColor: 'rgba(54, 162, 235, 1)',\n// //         borderWidth: 1,\n// //       },\n// //       {\n// //         label: 'Put Volume',\n// //         data: volumeData.map((entry) => \n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume),\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n// //         borderColor: 'rgba(255, 99, 132, 1)',\n// //         borderWidth: 1,\n// //       },\n// //     ],\n// //   };\n\n// //   // Function to calculate percentage movement using Greeks\n// //   const calculatePriceImpact = (greeks, priceChange) => {\n// //     const delta = greeks.delta || 0;\n// //     const gamma = greeks.gamma || 0;\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\n// //   };\n\n// //   return (\n// //     <div>\n// //       <form onSubmit={handleSubmit}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter Stock Symbol\"\n// //           value={symbol}\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n// //         />\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n\n// //       {priceData.length > 0 && (\n// //         <>\n// //           <h2>{symbol} Stock Price</h2>\n// //           <Line data={priceChart} />\n// //         </>\n// //       )}\n\n// //       {volumeData.length > 0 && (\n// //         <>\n// //           <h2>Volume Data</h2>\n// //           <Bar data={volumeChart} />\n// //         </>\n// //       )}\n\n// //       {strikeData.length > 0 && (\n// //         <>\n// //           <h2>Strike Price Data with Greeks</h2>\n// //           <ul>\n// //             {strikeData.map((strike) => (\n// //               <li key={strike.id}>\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         </>\n// //       )}\n\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n// //       </button>\n// //     </div>\n// //   );\n// // };\n\n// // export default StockTracker;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { Line, Bar } from 'react-chartjs-2';\n// // import 'chart.js/auto'; // Required for chart.js\n\n// // const StockTracker = () => {\n// //   const [symbol, setSymbol] = useState('');\n// //   const [priceData, setPriceData] = useState([]);\n// //   const [volumeData, setVolumeData] = useState([]);\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n// //     fetchStockData(symbol);\n// //   };\n\n// //   const fetchStockData = async (symbol) => {\n// //     try {\n// //       const now = new Date();\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n// //       const toDate = now.toISOString().split('T')[0];\n\n// //       // Fetch stock price data\n// //       const priceResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setPriceData(priceResponse.data.results || []);\n\n// //       // Fetch volume data for the closest expiry date\n// //       const volumeResponse = await axios.get(\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setVolumeData(volumeResponse.data.results || []);\n\n// //     } catch (error) {\n// //       console.error('Error fetching stock data:', error);\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (symbol) {\n// //       const interval = setInterval(() => {\n// //         fetchStockData(symbol);\n// //       }, 1000); // Fetch every second\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [symbol]);\n\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n// //   // Price chart configuration\n// //   const priceChart = {\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Stock Price',\n// //         data: priceData.map((entry) => entry.c),\n// //         fill: false,\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\n// //         borderColor: 'rgba(75,192,192,1)',\n// //       },\n// //     ],\n// //   };\n\n// //   // Volume chart configuration with updated data based on `toggleVolume`\n// //   const volumeChart = {\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Call Volume',\n// //         data: volumeData.map((entry) =>\n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\n// //         ),\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n// //         borderColor: 'rgba(54, 162, 235, 1)',\n// //         borderWidth: 1,\n// //       },\n// //       {\n// //         label: 'Put Volume',\n// //         data: volumeData.map((entry) =>\n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\n// //         ),\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n// //         borderColor: 'rgba(255, 99, 132, 1)',\n// //         borderWidth: 1,\n// //       },\n// //     ],\n// //   };\n\n// //   // Function to calculate percentage movement using Greeks\n// //   const calculatePriceImpact = (greeks, priceChange) => {\n// //     const delta = greeks.delta || 0;\n// //     const gamma = greeks.gamma || 0;\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\n// //   };\n\n// //   return (\n// //     <div>\n// //       <form onSubmit={handleSubmit}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter Stock Symbol\"\n// //           value={symbol}\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n// //         />\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n\n// //       {priceData.length > 0 && (\n// //         <>\n// //           <h2>{symbol} Stock Price</h2>\n// //           <Line data={priceChart} />\n// //         </>\n// //       )}\n\n// //       {volumeData.length > 0 && (\n// //         <>\n// //           <h2>Volume Data</h2>\n// //           <Bar data={volumeChart} />\n// //         </>\n// //       )}\n\n// //       {strikeData.length > 0 && (\n// //         <>\n// //           <h2>Strike Price Data with Greeks</h2>\n// //           <ul>\n// //             {strikeData.map((strike) => (\n// //               <li key={strike.id}>\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         </>\n// //       )}\n\n// //       {/* Toggle Button */}\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n// //       </button>\n// //     </div>\n// //   );\n// // };\n\n// // export default StockTracker;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { Line, Bar } from 'react-chartjs-2';\n// // import 'chart.js/auto'; // Required for chart.js\n\n// // const StockTracker = () => {\n// //   const [symbol, setSymbol] = useState('');\n// //   const [priceData, setPriceData] = useState([]);\n// //   const [volumeData, setVolumeData] = useState([]);\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n// //     fetchStockData(symbol);\n// //   };\n\n// //   const fetchStockData = async (symbol) => {\n// //     try {\n// //       const now = new Date();\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n// //       const toDate = now.toISOString().split('T')[0];\n\n// //       // Fetch stock price data\n// //       const priceResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setPriceData(priceResponse.data.results || []);\n\n// //       // Fetch volume data for the closest expiry date\n// //       const volumeResponse = await axios.get(\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n// //       console.log(volumeResponse.data.results);\n\n// //       setVolumeData(volumeResponse.data.results || []);\n\n// //     } catch (error) {\n// //       console.error('Error fetching stock data:', error);\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (symbol) {\n// //       const interval = setInterval(() => {\n// //         fetchStockData(symbol);\n// //       }, 1000); // Fetch every second\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [symbol]);\n\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n// //   // Price chart configuration\n// //   const priceChart = {\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Stock Price',\n// //         data: priceData.map((entry) => entry.c),\n// //         fill: false,\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\n// //         borderColor: 'rgba(75,192,192,1)',\n// //       },\n// //     ],\n// //   };\n\n// //   // Volume chart configuration with updated data based on `toggleVolume`\n// //   const volumeChart = {\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Call Volume',\n// //         data: volumeData.map((entry) =>\n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\n// //         ),\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n// //         borderColor: 'rgba(54, 162, 235, 1)',\n// //         borderWidth: 1,\n// //       },\n// //       {\n// //         label: 'Put Volume',\n// //         data: volumeData.map((entry) =>\n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\n// //         ),\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n// //         borderColor: 'rgba(255, 99, 132, 1)',\n// //         borderWidth: 1,\n// //       },\n// //     ],\n// //   };\n\n// //   // Function to calculate percentage movement using Greeks\n// //   const calculatePriceImpact = (greeks, priceChange) => {\n// //     const delta = greeks.delta || 0;\n// //     const gamma = greeks.gamma || 0;\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\n// //   };\n\n// //   const handleToggleVolume = () => {\n// //     setToggleVolume((prevState) => {\n// //       const newToggleState = !prevState;\n// //       console.log('Toggle Volume Button Clicked: ', newToggleState);\n// //       console.log('Volume Data: ', volumeData);\n// //       console.log('Price Data: ', priceData);\n// //       return newToggleState;\n// //     });\n// //   };\n\n// //   return (\n// //     <div>\n// //       <form onSubmit={handleSubmit}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter Stock Symbol\"\n// //           value={symbol}\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n// //         />\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n\n// //       {/* Display stock price graph */}\n// //       {priceData.length > 0 && (\n// //         <>\n// //           <h2>{symbol} Stock Price</h2>\n// //           <Line data={priceChart} />\n// //         </>\n// //       )}\n\n// //       {/* Display volume/dollar amount graph */}\n// //       {volumeData.length > 0 && (\n// //         <>\n// //           <h2>Volume Data</h2>\n// //           <Bar data={volumeChart} />\n// //         </>\n// //       )}\n\n// //       {/* Display strike data */}\n// //       {strikeData.length > 0 && (\n// //         <>\n// //           <h2>Strike Price Data with Greeks</h2>\n// //           <ul>\n// //             {strikeData.map((strike) => (\n// //               <li key={strike.id}>\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         </>\n// //       )}\n\n// //       {/* Toggle button to switch between volume and dollar amount */}\n// //       <button onClick={handleToggleVolume}>\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n// //       </button>\n// //     </div>\n// //   );\n// // };\n\n// // export default StockTracker;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { Line, Bar } from 'react-chartjs-2';\n// // import 'chart.js/auto'; // Required for chart.js\n\n// // const StockTracker = () => {\n// //   const [symbol, setSymbol] = useState('');\n// //   const [priceData, setPriceData] = useState([]);\n// //   const [optionData, setOptionData] = useState([]); // For storing option data\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n// //     fetchStockData(symbol);\n// //   };\n// // //   Right now the marrcket is c\n// // //   const fetchStockData = async (symbol) => {\n// // //     try {\n// // //       const now = new Date();\n// // //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000); // Fetching last 10 minutes of data\n// // //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n// // //       const toDate = now.toISOString().split('T')[0];\n\n// // //       // Fetch stock price data\n// // //       const priceResponse = await axios.get(\n// // //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/${fromDate}/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// // //       );\n\n// // //       setPriceData(priceResponse.data.results || []);\n// // //     } catch (error) {\n// // //       console.error('Error fetching stock data:', error);\n// // //     }\n// // //   };\n\n// //   const fetchStockData = async (symbol) => {\n// //     try {\n// //       const now = new Date();\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n// //       const toDate = now.toISOString().split('T')[0];\n\n// //       // Fetch stock price data\n// //       const priceResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setPriceData(priceResponse.data.results || []);\n\n// //       // Fetch option data from your provided API URL\n// //       const optionResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/O:${symbol}251219C00650000/range/1/day/2024-09-10/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setOptionData(optionResponse.data.results || []); // Store option data\n\n// //     } catch (error) {\n// //       console.error('Error fetching stock or option data:', error);\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (symbol) {\n// //       const interval = setInterval(() => {\n// //         fetchStockData(symbol);\n// //       }, 1000); // Fetch every second\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [symbol]);\n\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n// //   // Price chart configuration\n// //   const priceChart = {\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Stock Price',\n// //         data: priceData.map((entry) => entry.c),\n// //         fill: false,\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\n// //         borderColor: 'rgba(75,192,192,1)',\n// //       },\n// //     ],\n// //   };\n\n// //   // Function to toggle between showing volume or dollar amount in option chart\n// //   const handleToggleVolume = () => {\n// //     setToggleVolume((prevState) => !prevState);\n// //     console.log('Toggle Volume Button Clicked:', toggleVolume);\n// //   };\n\n// //   return (\n// //     <div>\n// //       <form onSubmit={handleSubmit}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter Stock Symbol\"\n// //           value={symbol}\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n// //         />\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n\n// //       {/* Display stock price graph */}\n// //       {priceData.length > 0 && (\n// //         <>\n// //           <h2>{symbol} Stock Price</h2>\n// //           <Line data={priceChart} />\n// //         </>\n// //       )}\n\n// //     </div>\n// //   );\n// // };\n\n// // export default StockTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n\n// const StockOptionsTracker = () => {\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\n//   const [stockData, setStockData] = useState([]); // Stock price data\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\n\n//   // Fetch stock data and options contracts\n//   useEffect(() => {\n//     const fetchStockDataAndOptions = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         // Fetch stock data for latest price\n//         const stockResponse = await axios.get(\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/prev?adjusted=true&apiKey=${polygonApiKey}`\n//         );\n//         const currentPrice = stockResponse.data.results[0].c;\n//         setStockPrice(currentPrice);\n\n//         // Fetch stock price data for charting\n//         const stockPriceResponse = await axios.get(\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\n//         );\n//         setStockData(stockPriceResponse.data.results || []);\n\n//         // Fetch options contracts for the soonest expiration\n//         const optionsResponse = await axios.get(\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\n//         );\n//         const contracts = optionsResponse.data.results || [];\n//         console.log(\"Contracts\",contracts);\n\n//         // Filter contracts based on strikes around current stock price (±10)\n//         const filteredContracts = contracts.filter(\n//           (contract) =>\n//             contract.expiration_date === '2024-09-27'\n//             // && contract.strike_price >= currentPrice - 5 && \n//             // contract.strike_price <= currentPrice + 5\n//         );\n//         console.log(\"Currunet Price\",currentPrice);\n//         console.log(\"Filtered Contracts\",filteredContracts);\n//         setOptionContracts(filteredContracts);\n\n//         // Fetch cumulative volume data for each contract\n//         const volumes = [];\n//         const timeLabels = [];\n//         for (let i = 0; i < filteredContracts.length; i++) {\n//           const contract = filteredContracts[i];\n//           const volumeResponse = await axios.get(\n//             `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\n//           );\n//           const volumeData = volumeResponse.data.results || [];\n//           console.log(\"Volume Data\",volumeData);\n\n//           // Set time labels once (for X-axis)\n//           if (i === 0 && volumeData.length > 0) {\n//             timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\n//           }\n\n//           // Accumulate the volume for each minute across all contracts\n//           volumeData.forEach((item, index) => {\n//             volumes[index] = (volumes[index] || 0) + item.v;\n//           });\n//         }\n\n//         setCumulativeVolumes(volumes);\n//         setTimeLabels(timeLabels);\n//       } catch (err) {\n//         console.error('Error fetching data:', err);\n//         setError('Failed to load data');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchStockDataAndOptions();\n\n//     const interval = setInterval(() => {\n//       fetchStockDataAndOptions();\n//     }, 60000); // Update every 60 seconds\n\n//     return () => clearInterval(interval);\n//   }, [stockSymbol]);\n\n//   // Helper function to get today’s date\n//   const getTodayDate = () => {\n//     const today = new Date();\n//     return today.toISOString().split('T')[0];\n//   };\n\n//   // Line chart data for stock price\n//   const stockChartData = {\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\n//         borderColor: 'rgba(75,192,192,1)',\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         fill: false,\n//         tension: 0.1,\n//       },\n//     ],\n//   };\n\n//   // Bar chart data for cumulative options volume\n//   const optionsVolumeChartData = {\n//     labels: timeLabels, // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Cumulative Volume',\n//         data: cumulativeVolumes, // Y-axis (volume)\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h2>Stock and Options Tracker</h2>\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <label>\n//           Stock Symbol:\n//           <input\n//             type=\"text\"\n//             value={stockSymbol}\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\n//             style={{ marginLeft: '10px' }}\n//           />\n//         </label>\n//       </div>\n\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\n//       </button>\n\n//       {loading && <p>Loading data...</p>}\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n\n//       <div style={{ marginTop: '30px' }}>\n//         <h3>Stock Price Data for {stockSymbol}</h3>\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\n\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Expiration Date 2024-09-27</h3>\n//         {cumulativeVolumes.length > 0 ? (\n//           <Bar data={optionsVolumeChartData} />\n//         ) : (\n//           <p>No cumulative volume data available</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default StockOptionsTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n\n// const StockOptionsTracker = () => {\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\n//   const [stockData, setStockData] = useState([]); // Stock price data\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\n\n//   // Fetch stock data and options contracts\n//   useEffect(() => {\n//     const fetchStockDataAndOptions = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         // Fetch stock data for latest price\n//         const stockResponse = await axios.get(\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\n//         );\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\n//         setStockPrice(currentPrice);\n\n//         // Fetch stock price data for charting\n//         const stockPriceResponse = await axios.get(\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\n//         );\n//         setStockData(stockPriceResponse.data.results || []);\n\n//         // Fetch options contracts for the soonest expiration\n//         const optionsResponse = await axios.get(\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\n//         );\n//         const contracts = optionsResponse.data.results || [];\n\n//         // Find the soonest expiration date\n//         const soonestExpiryDate = contracts\n//           .map(contract => contract.expiration_date)\n//           .sort()[0];\n\n//         console.log(\"Soonest Expiry Date\",soonestExpiryDate);\n\n//         // Filter contracts based on strikes around current stock price (±10)\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\n\n//     // Find the closest strike price to the current price\n//     const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\n\n//     // Select 10 strikes below and 10 strikes above\n//     const start = Math.max(0, closestContractIndex - 10);\n//     const end = Math.min(sortedContracts.length, closestContractIndex + 10);\n//     const filteredContracts = sortedContracts.slice(start, end);\n\n//     console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\n//     setOptionContracts(filteredContracts);\n\n//         console.log(\"Currunet Price\",currentPrice);\n//         console.log(\"Filtered Contracts\",filteredContracts);\n\n//         // Fetch cumulative volume data for each contract\n//         if (filteredContracts.length > 0) {\n//             const volumes = [];\n//             const timeLabels = [];\n//             for (let i = 0; i < filteredContracts.length; i++) {\n//               const contract = filteredContracts[i];\n//               const volumeResponse = await axios.get(\n//                 `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\n//               );\n//               const volumeData = volumeResponse.data.results || [];\n//               console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\n\n//               // Set time labels once (for X-axis)\n//               if (i === 0 && volumeData.length > 0) {\n//                 timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\n//               }\n\n//               // Accumulate the volume for each minute across all contracts\n//               volumeData.forEach((item, index) => {\n//                 volumes[index] = (volumes[index] || 0) + item.v;\n//               });\n//             }\n\n//             setCumulativeVolumes(volumes);\n//             setTimeLabels(timeLabels);\n//             }  else {\n//                 console.log(\"No contracts found within the 10 above and below strike price range.\");\n//               }\n\n//       } catch (err) {\n//         console.error('Error fetching data:', err);\n//         setError('Failed to load data');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchStockDataAndOptions();\n\n//     const interval = setInterval(() => {\n//       fetchStockDataAndOptions();\n//     }, 60000); // Update every 60 seconds\n\n//     return () => clearInterval(interval);\n//   }, [stockSymbol]);\n\n//   // Helper function to get today’s date\n//   const getTodayDate = () => {\n//     const today = new Date();\n//     return today.toISOString().split('T')[0];\n//   };\n\n//   // Line chart data for stock price\n//   const stockChartData = {\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\n//         borderColor: 'rgba(75,192,192,1)',\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         fill: false,\n//         tension: 0.1,\n//       },\n//     ],\n//   };\n\n//   // Bar chart data for cumulative options volume\n//   const optionsVolumeChartData = {\n//     labels: timeLabels, // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Cumulative Volume',\n//         data: cumulativeVolumes, // Y-axis (volume)\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h2>Stock and Options Tracker</h2>\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <label>\n//           Stock Symbol:\n//           <input\n//             type=\"text\"\n//             value={stockSymbol}\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\n//             style={{ marginLeft: '10px' }}\n//           />\n//         </label>\n//       </div>\n\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\n//       </button>\n\n//       {loading && <p>Loading data...</p>}\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n\n//       <div style={{ marginTop: '30px' }}>\n//         <h3>Stock Price Data for {stockSymbol}</h3>\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\n\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\n//         {cumulativeVolumes.length > 0 ? (\n//           <Bar data={optionsVolumeChartData} />\n//         ) : (\n//           <p>No cumulative volume data available</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default StockOptionsTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n\n// const StockOptionsTracker = () => {\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\n//   const [stockData, setStockData] = useState([]); // Stock price data\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\n\n//   // Fetch stock data and options contracts\n//   useEffect(() => {\n//     const fetchStockDataAndOptions = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         // Fetch stock data for latest price\n//         const stockResponse = await axios.get(\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\n//         );\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\n//         setStockPrice(currentPrice);\n\n//         // Fetch stock price data for charting\n//         const stockPriceResponse = await axios.get(\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\n//         );\n//         setStockData(stockPriceResponse.data.results || []);\n\n//         // Fetch options contracts for the soonest expiration\n//         const optionsResponse = await axios.get(\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\n//         );\n//         const contracts = optionsResponse.data.results || [];\n\n//         // Find the soonest expiration date\n//         const soonestExpiryDate = contracts\n//           .map(contract => contract.expiration_date)\n//           .sort()[0];\n\n//         console.log(\"Soonest Expiry Date\", soonestExpiryDate);\n\n//         // Filter contracts based on strikes around current stock price (±10)\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\n\n//         // Find the closest strike price to the current price\n//         const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\n\n//         // Select 10 strikes below and 10 strikes above\n//         const start = Math.max(0, closestContractIndex - 10);\n//         const end = Math.min(sortedContracts.length, closestContractIndex + 10);\n//         const filteredContracts = sortedContracts.slice(start, end);\n\n//         console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\n//         setOptionContracts(filteredContracts);\n\n//         console.log(\"Current Price\", currentPrice);\n//         console.log(\"Filtered Contracts\", filteredContracts);\n\n//         // Fetch cumulative volume data for each contract\n//         if (filteredContracts.length > 0) {\n//           const volumes = [];\n//           const timeLabels = [];\n//           for (let i = 0; i < filteredContracts.length; i++) {\n//             const contract = filteredContracts[i];\n//             const volumeResponse = await axios.get(\n//               `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\n//             );\n//             const volumeData = volumeResponse.data.results || [];\n//             console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\n\n//             // Set time labels once (for X-axis)\n//             if (i === 0 && volumeData.length > 0) {\n//               timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\n//             }\n\n//             // Accumulate the volume for each minute across all contracts\n//             volumeData.forEach((item, index) => {\n//               volumes[index] = (volumes[index] || 0) + item.v;\n//             });\n//           }\n\n//           setCumulativeVolumes(volumes);\n//           setTimeLabels(timeLabels);\n//         } else {\n//           console.log(\"No contracts found within the 10 above and below strike price range.\");\n//         }\n\n//       } catch (err) {\n//         console.error('Error fetching data:', err);\n//         setError('Failed to load data');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchStockDataAndOptions();\n\n//     const interval = setInterval(() => {\n//       fetchStockDataAndOptions();\n//     }, 60000); // Update every 60 seconds\n\n//     return () => clearInterval(interval);\n//   }, [stockSymbol]);\n\n//   // Helper function to get today’s date\n//   const getTodayDate = () => {\n//     const today = new Date();\n//     return today.toISOString().split('T')[0];\n//   };\n\n//   // Line chart data for stock price\n//   const stockChartData = {\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\n//         borderColor: 'rgba(75,192,192,1)',\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         fill: false,\n//         tension: 0.1,\n//       },\n//     ],\n//   };\n\n//   // Bar chart data for cumulative options volume\n//   const optionsVolumeChartData = {\n//     labels: timeLabels, // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Cumulative Volume',\n//         data: cumulativeVolumes, // Y-axis (volume)\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h2>Stock and Options Tracker</h2>\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <label>\n//           Stock Symbol:\n//           <input\n//             type=\"text\"\n//             value={stockSymbol}\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\n//             style={{ marginLeft: '10px' }}\n//           />\n//         </label>\n//       </div>\n\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\n//       </button>\n\n//       {loading && <p>Loading data...</p>}\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n\n//       <div style={{ marginTop: '30px' }}>\n//         <h3>Stock Price Data for {stockSymbol}</h3>\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\n\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\n//         {cumulativeVolumes.length > 0 ? (\n//           <Bar data={optionsVolumeChartData} />\n//         ) : (\n//           <p>No cumulative volume data available</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default StockOptionsTracker;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line, Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\n\n// Black-Scholes Greeks calculations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst blackScholesGreeks = (S, K, T, r, sigma, optionType) => {\n  const d1 = (Math.log(S / K) + (r + sigma ** 2 / 2) * T) / (sigma * Math.sqrt(T));\n  const d2 = d1 - sigma * Math.sqrt(T);\n  const phi = x => 1 / Math.sqrt(2 * Math.PI) * Math.exp(-0.5 * x ** 2);\n  const delta = optionType === 'call' ? phi(d1) : phi(d1) - 1;\n  return {\n    delta\n  };\n};\nconst StockOptionsTracker = () => {\n  _s();\n  const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\n  const [stockPrice, setStockPrice] = useState(0); // Latest stock price\n  const [stockData, setStockData] = useState([]); // Stock price data\n  const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\n  const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\n  const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\n  const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\n\n  // Fetch stock data and options contracts\n  useEffect(() => {\n    const fetchStockDataAndOptions = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        // Fetch stock data for latest price\n        const stockResponse = await axios.get(`https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`);\n        const currentPrice = stockResponse.data.ticker.lastTrade.p;\n        setStockPrice(currentPrice);\n\n        // Fetch stock price data for charting\n        const stockPriceResponse = await axios.get(`https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`);\n        setStockData(stockPriceResponse.data.results || []);\n\n        // Fetch options contracts for the soonest expiration\n        const optionsResponse = await axios.get(`https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`);\n        const contracts = optionsResponse.data.results || [];\n\n        // Find the soonest expiration date\n        const soonestExpiryDate = contracts.map(contract => contract.expiration_date).sort()[0];\n        console.log(\"Soonest Expiry Date\", soonestExpiryDate);\n\n        // Filter contracts based on strikes around current stock price (±10)\n        const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\n\n        // Find the closest strike price to the current price\n        const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\n\n        // Select 10 strikes below and 10 strikes above\n        const start = Math.max(0, closestContractIndex - 10);\n        const end = Math.min(sortedContracts.length, closestContractIndex + 10);\n        const filteredContracts = sortedContracts.slice(start, end);\n        console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\n        setOptionContracts(filteredContracts);\n        console.log(\"Current Price\", currentPrice);\n        console.log(\"Filtered Contracts\", filteredContracts);\n\n        // Fetch cumulative volume data for each contract\n        if (filteredContracts.length > 0) {\n          const volumes = [];\n          const timeLabels = [];\n          for (let i = 0; i < filteredContracts.length; i++) {\n            const contract = filteredContracts[i];\n            const volumeResponse = await axios.get(`https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`);\n            const volumeData = volumeResponse.data.results || [];\n            console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\n\n            // Set time labels once (for X-axis)\n            if (i === 0 && volumeData.length > 0) {\n              timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\n            }\n\n            // Accumulate the volume for each minute across all contracts\n            volumeData.forEach((item, index) => {\n              volumes[index] = (volumes[index] || 0) + item.v;\n            });\n          }\n          setCumulativeVolumes(volumes);\n          setTimeLabels(timeLabels);\n        } else {\n          console.log(\"No contracts found within the 10 above and below strike price range.\");\n        }\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError('Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchStockDataAndOptions();\n    const interval = setInterval(() => {\n      fetchStockDataAndOptions();\n    }, 60000); // Update every 60 seconds\n\n    return () => clearInterval(interval);\n  }, [stockSymbol]);\n\n  // Helper function to get today’s date\n  const getTodayDate = () => {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  };\n\n  // Line chart data for stock price\n  const stockChartData = {\n    labels: stockData.map(item => new Date(item.t).toLocaleTimeString()),\n    // X-axis (time)\n    datasets: [{\n      label: 'Stock Price',\n      data: stockData.map(item => item.c),\n      // Y-axis (stock price)\n      borderColor: 'rgba(75,192,192,1)',\n      backgroundColor: 'rgba(75,192,192,0.2)',\n      fill: false,\n      tension: 0.1\n    }]\n  };\n\n  // Bar chart data for cumulative options volume\n  const optionsVolumeChartData = {\n    labels: timeLabels,\n    // X-axis (time)\n    datasets: [{\n      label: 'Cumulative Volume',\n      data: cumulativeVolumes,\n      // Y-axis (volume)\n      backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 1\n    }]\n  };\n\n  //   return (\n  //     <div style={{ padding: '20px' }}>\n  //       <h2>Stock and Options Tracker</h2>\n\n  //       <div style={{ marginBottom: '20px' }}>\n  //         <label>\n  //           Stock Symbol:\n  //           <input\n  //             type=\"text\"\n  //             value={stockSymbol}\n  //             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\n  //             style={{ marginLeft: '10px' }}\n  //           />\n  //         </label>\n  //       </div>\n\n  //       <button onClick={() => setIsDollarMode(!isDollarMode)}>\n  //         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\n  //       </button>\n\n  //       {loading && <p>Loading data...</p>}\n  //       {error && <p style={{ color: 'red' }}>{error}</p>}\n\n  //       <div style={{ marginTop: '30px' }}>\n  //         <h3>Stock Price Data for {stockSymbol}</h3>\n  //         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\n\n  //         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\n  //         {cumulativeVolumes.length > 0 ? (\n  //           <Bar data={optionsVolumeChartData} />\n  //         ) : (\n  //           <p>No cumulative volume data available</p>\n  //         )}\n\n  //       </div>\n  //     </div>\n  //   );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Stock and Options Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1479,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Stock Symbol:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: stockSymbol,\n          onChange: e => setStockSymbol(e.target.value.toUpperCase()),\n          style: {\n            marginLeft: '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1484,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1482,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1481,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsDollarMode(!isDollarMode),\n      children: isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1493,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1497,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1498,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Stock Price Data for \", stockSymbol]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1501,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Price: $\", stockPrice]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1502,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: '40px'\n        },\n        children: \"Options Cumulative Volume / Dollar Amount for Nearest Expiry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1504,\n        columnNumber: 9\n      }, this), Object.keys(cumulativeVolumes.calls).length > 0 ? /*#__PURE__*/_jsxDEV(Bar, {\n        data: optionsVolumeChartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1506,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No cumulative volume data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1508,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: '40px'\n        },\n        children: \"Option Chain with 1% Move Estimation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1511,\n        columnNumber: 9\n      }, this), optionContracts.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Strike\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1516,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Call LTP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1517,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Put LTP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1518,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"IV\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1519,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"1% Up Estimation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1520,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"1% Down Estimation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1521,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1515,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1514,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: optionContracts.map(contract => {\n            const {\n              delta\n            } = blackScholesGreeks(stockPrice, contract.strike_price, 0.1, 0.01, contract.implied_volatility, contract.option_type);\n            const move1Up = contract.last_trade_price + stockPrice * 0.01 * delta;\n            const move1Down = contract.last_trade_price - stockPrice * 0.01 * delta;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: contract.strike_price\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1531,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: contract.last_trade_price_call\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1532,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: contract.last_trade_price_put\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1533,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [contract.implied_volatility, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1534,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: move1Up.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1535,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: move1Down.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1536,\n                columnNumber: 21\n              }, this)]\n            }, contract.ticker, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1530,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1524,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1513,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No option chain data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1543,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1500,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1478,\n    columnNumber: 5\n  }, this);\n};\n_s(StockOptionsTracker, \"r7fGoH1SzS9VlP2mkY8WkspTb9s=\");\n_c = StockOptionsTracker;\nexport default StockOptionsTracker;\nvar _c;\n$RefreshReg$(_c, \"StockOptionsTracker\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","Bar","jsxDEV","_jsxDEV","blackScholesGreeks","S","K","T","r","sigma","optionType","d1","Math","log","sqrt","d2","phi","x","PI","exp","delta","StockOptionsTracker","_s","stockSymbol","setStockSymbol","stockPrice","setStockPrice","stockData","setStockData","optionContracts","setOptionContracts","cumulativeVolumes","setCumulativeVolumes","timeLabels","setTimeLabels","isDollarMode","setIsDollarMode","loading","setLoading","error","setError","polygonApiKey","fetchStockDataAndOptions","stockResponse","get","currentPrice","data","ticker","lastTrade","p","stockPriceResponse","getTodayDate","results","optionsResponse","contracts","soonestExpiryDate","map","contract","expiration_date","sort","console","sortedContracts","a","b","parseFloat","strike_price","closestContractIndex","findIndex","start","max","end","min","length","filteredContracts","slice","volumes","i","volumeResponse","volumeData","push","item","Date","t","toLocaleTimeString","forEach","index","v","err","interval","setInterval","clearInterval","today","toISOString","split","stockChartData","labels","datasets","label","c","borderColor","backgroundColor","fill","tension","optionsVolumeChartData","borderWidth","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","type","value","onChange","e","target","toUpperCase","marginLeft","onClick","color","marginTop","Object","keys","calls","implied_volatility","option_type","move1Up","last_trade_price","move1Down","last_trade_price_call","last_trade_price_put","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/polygon_without_ws/stock-tracker/src/components/StockTracker.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { Line, Bar } from 'react-chartjs-2';\r\n// // import 'chart.js/auto'; // Required for chart.js\r\n\r\n// // const StockTracker = () => {\r\n// //   const [symbol, setSymbol] = useState('');\r\n// //   const [priceData, setPriceData] = useState([]);\r\n// //   const [volumeData, setVolumeData] = useState([]);\r\n// //   const [contractData, setContractData] = useState([]);\r\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and dollar amount\r\n\r\n// //   const handleSubmit = (e) => {\r\n// //     e.preventDefault();\r\n// //     fetchStockData(symbol);\r\n// //   };\r\n\r\n// //   const fetchStockData = async (symbol) => {\r\n// //     try {\r\n// //       const now = new Date();\r\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n      \r\n// //       // Convert to YYYY-MM-DD format as required by Polygon API\r\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0]; \r\n// //       const toDate = now.toISOString().split('T')[0]; \r\n  \r\n// //       // Fetch stock price data\r\n// //       const priceResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-22?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n      \r\n// //       console.log(\"Price Response\",priceResponse.data.results);\r\n// //       setPriceData(priceResponse.data.results || []); // Update your price data state\r\n  \r\n// //       // Fetch volume data for the closest expiry date\r\n// //       const volumeResponse = await axios.get(\r\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n// //       console.log(volumeResponse.data.results);\r\n  \r\n// //       setVolumeData(volumeResponse.data.results || []); // Update your volume data state\r\n// //     } catch (error) {\r\n// //       if (error.response && error.response.status === 429) {\r\n// //         // Handle rate limiting (Too Many Requests)\r\n// //         console.error(\"Rate limit exceeded. Please wait or upgrade your subscription.\");\r\n        \r\n// //         // Implement a retry after a delay (e.g., 60 seconds)\r\n// //         setTimeout(() => {\r\n// //           fetchStockData(symbol); // Retry fetching data after 60 seconds\r\n// //         }, 6000); // Wait 60 seconds before retrying\r\n// //       } else {\r\n// //         console.error('Error fetching stock data:', error);\r\n// //       }\r\n// //     }\r\n// //   };\r\n  \r\n\r\n// //   useEffect(() => {\r\n// //     if (symbol) {\r\n// //       const interval = setInterval(() => {\r\n// //         fetchStockData(symbol);\r\n// //       }, 5000); // Fetch every second\r\n// //       return () => clearInterval(interval);\r\n// //     }\r\n// //   }, [symbol]);\r\n\r\n// //   const priceChart = {\r\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Stock Price',\r\n// //         data: priceData.map((entry) => entry.c),\r\n// //         fill: false,\r\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n// //         borderColor: 'rgba(75,192,192,1)',\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   const volumeChart = {\r\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Call Volume',\r\n// //         data: volumeData.map((entry) => entry.call_volume),\r\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n// //         borderColor: 'rgba(54, 162, 235, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //       {\r\n// //         label: 'Put Volume',\r\n// //         data: volumeData.map((entry) => entry.put_volume),\r\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n// //         borderColor: 'rgba(255, 99, 132, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <form onSubmit={handleSubmit}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           placeholder=\"Enter Stock Symbol\"\r\n// //           value={symbol}\r\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n// //         />\r\n// //         <button type=\"submit\">Submit</button>\r\n// //       </form>\r\n\r\n// //       {priceData.length > 0 && (\r\n// //         <>\r\n// //           <h2>{symbol} Stock Price</h2>\r\n// //           <Line data={priceChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {volumeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Volume Data</h2>\r\n// //           <Bar data={volumeChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\r\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n// //       </button>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default StockTracker;\r\n\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { Line, Bar } from 'react-chartjs-2';\r\n// // import 'chart.js/auto'; // Required for chart.js\r\n\r\n// // const StockTracker = () => {\r\n// //   const [symbol, setSymbol] = useState('');\r\n// //   const [priceData, setPriceData] = useState([]);\r\n// //   const [volumeData, setVolumeData] = useState([]);\r\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\r\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n// //   const handleSubmit = (e) => {\r\n// //     e.preventDefault();\r\n// //     fetchStockData(symbol);\r\n// //   };\r\n\r\n// //   const fetchStockData = async (symbol) => {\r\n// //     try {\r\n// //       const now = new Date();\r\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n// //       const toDate = now.toISOString().split('T')[0];\r\n  \r\n// //       // Fetch stock price data\r\n// //       const priceResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-20?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n      \r\n// //       setPriceData(priceResponse.data.results || []);\r\n  \r\n// //       // Fetch volume data for the closest expiry date\r\n// //       const volumeResponse = await axios.get(\r\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n  \r\n// //       setVolumeData(volumeResponse.data.results || []);\r\n\r\n// //     //   // Fetch Greeks (Delta, Gamma, Vega) and Strike Prices for options 10 above/below\r\n// //     //   const strikeResponse = await axios.get(\r\n// //     //     `https://api.polygon.io/v1/reference/options/greeks/${symbol}?apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //     //   );\r\n  \r\n// //     //   setStrikeData(strikeResponse.data.results || []);\r\n      \r\n// //     } catch (error) {\r\n// //       console.error('Error fetching stock data:', error);\r\n// //     }\r\n// //   };\r\n  \r\n// //   useEffect(() => {\r\n// //     if (symbol) {\r\n// //       const interval = setInterval(() => {\r\n// //         fetchStockData(symbol);\r\n// //       }, 1000); // Fetch every second\r\n// //       return () => clearInterval(interval);\r\n// //     }\r\n// //   }, [symbol]);\r\n\r\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\r\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n// //   const priceChart = {\r\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Stock Price',\r\n// //         data: priceData.map((entry) => entry.c),\r\n// //         fill: false,\r\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n// //         borderColor: 'rgba(75,192,192,1)',\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   const volumeChart = {\r\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleDateString()), // Using date for better accuracy\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Call Volume',\r\n// //         data: volumeData.map((entry) => \r\n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume),\r\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n// //         borderColor: 'rgba(54, 162, 235, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //       {\r\n// //         label: 'Put Volume',\r\n// //         data: volumeData.map((entry) => \r\n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume),\r\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n// //         borderColor: 'rgba(255, 99, 132, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   // Function to calculate percentage movement using Greeks\r\n// //   const calculatePriceImpact = (greeks, priceChange) => {\r\n// //     const delta = greeks.delta || 0;\r\n// //     const gamma = greeks.gamma || 0;\r\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <form onSubmit={handleSubmit}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           placeholder=\"Enter Stock Symbol\"\r\n// //           value={symbol}\r\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n// //         />\r\n// //         <button type=\"submit\">Submit</button>\r\n// //       </form>\r\n\r\n// //       {priceData.length > 0 && (\r\n// //         <>\r\n// //           <h2>{symbol} Stock Price</h2>\r\n// //           <Line data={priceChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {volumeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Volume Data</h2>\r\n// //           <Bar data={volumeChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {strikeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Strike Price Data with Greeks</h2>\r\n// //           <ul>\r\n// //             {strikeData.map((strike) => (\r\n// //               <li key={strike.id}>\r\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \r\n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \r\n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\r\n// //               </li>\r\n// //             ))}\r\n// //           </ul>\r\n// //         </>\r\n// //       )}\r\n\r\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\r\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n// //       </button>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default StockTracker;\r\n\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { Line, Bar } from 'react-chartjs-2';\r\n// // import 'chart.js/auto'; // Required for chart.js\r\n\r\n// // const StockTracker = () => {\r\n// //   const [symbol, setSymbol] = useState('');\r\n// //   const [priceData, setPriceData] = useState([]);\r\n// //   const [volumeData, setVolumeData] = useState([]);\r\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\r\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n// //   const handleSubmit = (e) => {\r\n// //     e.preventDefault();\r\n// //     fetchStockData(symbol);\r\n// //   };\r\n\r\n// //   const fetchStockData = async (symbol) => {\r\n// //     try {\r\n// //       const now = new Date();\r\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n// //       const toDate = now.toISOString().split('T')[0];\r\n\r\n// //       // Fetch stock price data\r\n// //       const priceResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n\r\n// //       setPriceData(priceResponse.data.results || []);\r\n\r\n// //       // Fetch volume data for the closest expiry date\r\n// //       const volumeResponse = await axios.get(\r\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n\r\n// //       setVolumeData(volumeResponse.data.results || []);\r\n      \r\n// //     } catch (error) {\r\n// //       console.error('Error fetching stock data:', error);\r\n// //     }\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     if (symbol) {\r\n// //       const interval = setInterval(() => {\r\n// //         fetchStockData(symbol);\r\n// //       }, 1000); // Fetch every second\r\n// //       return () => clearInterval(interval);\r\n// //     }\r\n// //   }, [symbol]);\r\n\r\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\r\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n// //   // Price chart configuration\r\n// //   const priceChart = {\r\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Stock Price',\r\n// //         data: priceData.map((entry) => entry.c),\r\n// //         fill: false,\r\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n// //         borderColor: 'rgba(75,192,192,1)',\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   // Volume chart configuration with updated data based on `toggleVolume`\r\n// //   const volumeChart = {\r\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Call Volume',\r\n// //         data: volumeData.map((entry) =>\r\n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\r\n// //         ),\r\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n// //         borderColor: 'rgba(54, 162, 235, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //       {\r\n// //         label: 'Put Volume',\r\n// //         data: volumeData.map((entry) =>\r\n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\r\n// //         ),\r\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n// //         borderColor: 'rgba(255, 99, 132, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   // Function to calculate percentage movement using Greeks\r\n// //   const calculatePriceImpact = (greeks, priceChange) => {\r\n// //     const delta = greeks.delta || 0;\r\n// //     const gamma = greeks.gamma || 0;\r\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <form onSubmit={handleSubmit}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           placeholder=\"Enter Stock Symbol\"\r\n// //           value={symbol}\r\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n// //         />\r\n// //         <button type=\"submit\">Submit</button>\r\n// //       </form>\r\n\r\n// //       {priceData.length > 0 && (\r\n// //         <>\r\n// //           <h2>{symbol} Stock Price</h2>\r\n// //           <Line data={priceChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {volumeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Volume Data</h2>\r\n// //           <Bar data={volumeChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {strikeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Strike Price Data with Greeks</h2>\r\n// //           <ul>\r\n// //             {strikeData.map((strike) => (\r\n// //               <li key={strike.id}>\r\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \r\n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \r\n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\r\n// //               </li>\r\n// //             ))}\r\n// //           </ul>\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {/* Toggle Button */}\r\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\r\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n// //       </button>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default StockTracker;\r\n\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { Line, Bar } from 'react-chartjs-2';\r\n// // import 'chart.js/auto'; // Required for chart.js\r\n\r\n// // const StockTracker = () => {\r\n// //   const [symbol, setSymbol] = useState('');\r\n// //   const [priceData, setPriceData] = useState([]);\r\n// //   const [volumeData, setVolumeData] = useState([]);\r\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\r\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n// //   const handleSubmit = (e) => {\r\n// //     e.preventDefault();\r\n// //     fetchStockData(symbol);\r\n// //   };\r\n\r\n// //   const fetchStockData = async (symbol) => {\r\n// //     try {\r\n// //       const now = new Date();\r\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n// //       const toDate = now.toISOString().split('T')[0];\r\n\r\n// //       // Fetch stock price data\r\n// //       const priceResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n\r\n// //       setPriceData(priceResponse.data.results || []);\r\n\r\n// //       // Fetch volume data for the closest expiry date\r\n// //       const volumeResponse = await axios.get(\r\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n// //       console.log(volumeResponse.data.results);\r\n\r\n// //       setVolumeData(volumeResponse.data.results || []);\r\n      \r\n// //     } catch (error) {\r\n// //       console.error('Error fetching stock data:', error);\r\n// //     }\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     if (symbol) {\r\n// //       const interval = setInterval(() => {\r\n// //         fetchStockData(symbol);\r\n// //       }, 1000); // Fetch every second\r\n// //       return () => clearInterval(interval);\r\n// //     }\r\n// //   }, [symbol]);\r\n\r\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\r\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n// //   // Price chart configuration\r\n// //   const priceChart = {\r\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Stock Price',\r\n// //         data: priceData.map((entry) => entry.c),\r\n// //         fill: false,\r\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n// //         borderColor: 'rgba(75,192,192,1)',\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   // Volume chart configuration with updated data based on `toggleVolume`\r\n// //   const volumeChart = {\r\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Call Volume',\r\n// //         data: volumeData.map((entry) =>\r\n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\r\n// //         ),\r\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n// //         borderColor: 'rgba(54, 162, 235, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //       {\r\n// //         label: 'Put Volume',\r\n// //         data: volumeData.map((entry) =>\r\n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\r\n// //         ),\r\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n// //         borderColor: 'rgba(255, 99, 132, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   // Function to calculate percentage movement using Greeks\r\n// //   const calculatePriceImpact = (greeks, priceChange) => {\r\n// //     const delta = greeks.delta || 0;\r\n// //     const gamma = greeks.gamma || 0;\r\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\r\n// //   };\r\n\r\n// //   const handleToggleVolume = () => {\r\n// //     setToggleVolume((prevState) => {\r\n// //       const newToggleState = !prevState;\r\n// //       console.log('Toggle Volume Button Clicked: ', newToggleState);\r\n// //       console.log('Volume Data: ', volumeData);\r\n// //       console.log('Price Data: ', priceData);\r\n// //       return newToggleState;\r\n// //     });\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <form onSubmit={handleSubmit}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           placeholder=\"Enter Stock Symbol\"\r\n// //           value={symbol}\r\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n// //         />\r\n// //         <button type=\"submit\">Submit</button>\r\n// //       </form>\r\n\r\n// //       {/* Display stock price graph */}\r\n// //       {priceData.length > 0 && (\r\n// //         <>\r\n// //           <h2>{symbol} Stock Price</h2>\r\n// //           <Line data={priceChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {/* Display volume/dollar amount graph */}\r\n// //       {volumeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Volume Data</h2>\r\n// //           <Bar data={volumeChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {/* Display strike data */}\r\n// //       {strikeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Strike Price Data with Greeks</h2>\r\n// //           <ul>\r\n// //             {strikeData.map((strike) => (\r\n// //               <li key={strike.id}>\r\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \r\n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \r\n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\r\n// //               </li>\r\n// //             ))}\r\n// //           </ul>\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {/* Toggle button to switch between volume and dollar amount */}\r\n// //       <button onClick={handleToggleVolume}>\r\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n// //       </button>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default StockTracker;\r\n\r\n\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { Line, Bar } from 'react-chartjs-2';\r\n// // import 'chart.js/auto'; // Required for chart.js\r\n\r\n// // const StockTracker = () => {\r\n// //   const [symbol, setSymbol] = useState('');\r\n// //   const [priceData, setPriceData] = useState([]);\r\n// //   const [optionData, setOptionData] = useState([]); // For storing option data\r\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n// //   const handleSubmit = (e) => {\r\n// //     e.preventDefault();\r\n// //     fetchStockData(symbol);\r\n// //   };\r\n// // //   Right now the marrcket is c\r\n// // //   const fetchStockData = async (symbol) => {\r\n// // //     try {\r\n// // //       const now = new Date();\r\n// // //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000); // Fetching last 10 minutes of data\r\n// // //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n// // //       const toDate = now.toISOString().split('T')[0];\r\n  \r\n// // //       // Fetch stock price data\r\n// // //       const priceResponse = await axios.get(\r\n// // //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/${fromDate}/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// // //       );\r\n      \r\n// // //       setPriceData(priceResponse.data.results || []);\r\n// // //     } catch (error) {\r\n// // //       console.error('Error fetching stock data:', error);\r\n// // //     }\r\n// // //   };\r\n  \r\n\r\n// //   const fetchStockData = async (symbol) => {\r\n// //     try {\r\n// //       const now = new Date();\r\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n// //       const toDate = now.toISOString().split('T')[0];\r\n\r\n// //       // Fetch stock price data\r\n// //       const priceResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n      \r\n// //       setPriceData(priceResponse.data.results || []);\r\n\r\n// //       // Fetch option data from your provided API URL\r\n// //       const optionResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/O:${symbol}251219C00650000/range/1/day/2024-09-10/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n\r\n// //       setOptionData(optionResponse.data.results || []); // Store option data\r\n      \r\n// //     } catch (error) {\r\n// //       console.error('Error fetching stock or option data:', error);\r\n// //     }\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     if (symbol) {\r\n// //       const interval = setInterval(() => {\r\n// //         fetchStockData(symbol);\r\n// //       }, 1000); // Fetch every second\r\n// //       return () => clearInterval(interval);\r\n// //     }\r\n// //   }, [symbol]);\r\n\r\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\r\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n// //   // Price chart configuration\r\n// //   const priceChart = {\r\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Stock Price',\r\n// //         data: priceData.map((entry) => entry.c),\r\n// //         fill: false,\r\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n// //         borderColor: 'rgba(75,192,192,1)',\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n\r\n\r\n// //   // Function to toggle between showing volume or dollar amount in option chart\r\n// //   const handleToggleVolume = () => {\r\n// //     setToggleVolume((prevState) => !prevState);\r\n// //     console.log('Toggle Volume Button Clicked:', toggleVolume);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <form onSubmit={handleSubmit}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           placeholder=\"Enter Stock Symbol\"\r\n// //           value={symbol}\r\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n// //         />\r\n// //         <button type=\"submit\">Submit</button>\r\n// //       </form>\r\n\r\n// //       {/* Display stock price graph */}\r\n// //       {priceData.length > 0 && (\r\n// //         <>\r\n// //           <h2>{symbol} Stock Price</h2>\r\n// //           <Line data={priceChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default StockTracker;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto';\r\n\r\n// const StockOptionsTracker = () => {\r\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\r\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\r\n//   const [stockData, setStockData] = useState([]); // Stock price data\r\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\r\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\r\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\r\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\r\n\r\n//   // Fetch stock data and options contracts\r\n//   useEffect(() => {\r\n//     const fetchStockDataAndOptions = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         // Fetch stock data for latest price\r\n//         const stockResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/prev?adjusted=true&apiKey=${polygonApiKey}`\r\n//         );\r\n//         const currentPrice = stockResponse.data.results[0].c;\r\n//         setStockPrice(currentPrice);\r\n\r\n//         // Fetch stock price data for charting\r\n//         const stockPriceResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\r\n//         );\r\n//         setStockData(stockPriceResponse.data.results || []);\r\n\r\n//         // Fetch options contracts for the soonest expiration\r\n//         const optionsResponse = await axios.get(\r\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\r\n//         );\r\n//         const contracts = optionsResponse.data.results || [];\r\n//         console.log(\"Contracts\",contracts);\r\n        \r\n//         // Filter contracts based on strikes around current stock price (±10)\r\n//         const filteredContracts = contracts.filter(\r\n//           (contract) =>\r\n//             contract.expiration_date === '2024-09-27'\r\n//             // && contract.strike_price >= currentPrice - 5 && \r\n//             // contract.strike_price <= currentPrice + 5\r\n//         );\r\n//         console.log(\"Currunet Price\",currentPrice);\r\n//         console.log(\"Filtered Contracts\",filteredContracts);\r\n//         setOptionContracts(filteredContracts);\r\n\r\n//         // Fetch cumulative volume data for each contract\r\n//         const volumes = [];\r\n//         const timeLabels = [];\r\n//         for (let i = 0; i < filteredContracts.length; i++) {\r\n//           const contract = filteredContracts[i];\r\n//           const volumeResponse = await axios.get(\r\n//             `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\r\n//           );\r\n//           const volumeData = volumeResponse.data.results || [];\r\n//           console.log(\"Volume Data\",volumeData);\r\n\r\n//           // Set time labels once (for X-axis)\r\n//           if (i === 0 && volumeData.length > 0) {\r\n//             timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\r\n//           }\r\n\r\n//           // Accumulate the volume for each minute across all contracts\r\n//           volumeData.forEach((item, index) => {\r\n//             volumes[index] = (volumes[index] || 0) + item.v;\r\n//           });\r\n//         }\r\n\r\n//         setCumulativeVolumes(volumes);\r\n//         setTimeLabels(timeLabels);\r\n//       } catch (err) {\r\n//         console.error('Error fetching data:', err);\r\n//         setError('Failed to load data');\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchStockDataAndOptions();\r\n\r\n//     const interval = setInterval(() => {\r\n//       fetchStockDataAndOptions();\r\n//     }, 60000); // Update every 60 seconds\r\n\r\n//     return () => clearInterval(interval);\r\n//   }, [stockSymbol]);\r\n\r\n//   // Helper function to get today’s date\r\n//   const getTodayDate = () => {\r\n//     const today = new Date();\r\n//     return today.toISOString().split('T')[0];\r\n//   };\r\n\r\n//   // Line chart data for stock price\r\n//   const stockChartData = {\r\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//         backgroundColor: 'rgba(75,192,192,0.2)',\r\n//         fill: false,\r\n//         tension: 0.1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Bar chart data for cumulative options volume\r\n//   const optionsVolumeChartData = {\r\n//     labels: timeLabels, // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Cumulative Volume',\r\n//         data: cumulativeVolumes, // Y-axis (volume)\r\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n//         borderColor: 'rgba(75, 192, 192, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h2>Stock and Options Tracker</h2>\r\n\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <label>\r\n//           Stock Symbol:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={stockSymbol}\r\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n//             style={{ marginLeft: '10px' }}\r\n//           />\r\n//         </label>\r\n//       </div>\r\n\r\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n//       </button>\r\n\r\n//       {loading && <p>Loading data...</p>}\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n//       <div style={{ marginTop: '30px' }}>\r\n//         <h3>Stock Price Data for {stockSymbol}</h3>\r\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Expiration Date 2024-09-27</h3>\r\n//         {cumulativeVolumes.length > 0 ? (\r\n//           <Bar data={optionsVolumeChartData} />\r\n//         ) : (\r\n//           <p>No cumulative volume data available</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockOptionsTracker;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto';\r\n\r\n// const StockOptionsTracker = () => {\r\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\r\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\r\n//   const [stockData, setStockData] = useState([]); // Stock price data\r\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\r\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\r\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\r\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\r\n\r\n//   // Fetch stock data and options contracts\r\n//   useEffect(() => {\r\n//     const fetchStockDataAndOptions = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         // Fetch stock data for latest price\r\n//         const stockResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\r\n//         );\r\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\r\n//         setStockPrice(currentPrice);\r\n\r\n//         // Fetch stock price data for charting\r\n//         const stockPriceResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\r\n//         );\r\n//         setStockData(stockPriceResponse.data.results || []);\r\n\r\n//         // Fetch options contracts for the soonest expiration\r\n//         const optionsResponse = await axios.get(\r\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\r\n//         );\r\n//         const contracts = optionsResponse.data.results || [];\r\n\r\n//         // Find the soonest expiration date\r\n//         const soonestExpiryDate = contracts\r\n//           .map(contract => contract.expiration_date)\r\n//           .sort()[0];\r\n\r\n//         console.log(\"Soonest Expiry Date\",soonestExpiryDate);\r\n\r\n//         // Filter contracts based on strikes around current stock price (±10)\r\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\r\n\r\n//     // Find the closest strike price to the current price\r\n//     const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\r\n\r\n//     // Select 10 strikes below and 10 strikes above\r\n//     const start = Math.max(0, closestContractIndex - 10);\r\n//     const end = Math.min(sortedContracts.length, closestContractIndex + 10);\r\n//     const filteredContracts = sortedContracts.slice(start, end);\r\n\r\n//     console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\r\n//     setOptionContracts(filteredContracts);\r\n\r\n//         console.log(\"Currunet Price\",currentPrice);\r\n//         console.log(\"Filtered Contracts\",filteredContracts);\r\n        \r\n\r\n//         // Fetch cumulative volume data for each contract\r\n//         if (filteredContracts.length > 0) {\r\n//             const volumes = [];\r\n//             const timeLabels = [];\r\n//             for (let i = 0; i < filteredContracts.length; i++) {\r\n//               const contract = filteredContracts[i];\r\n//               const volumeResponse = await axios.get(\r\n//                 `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\r\n//               );\r\n//               const volumeData = volumeResponse.data.results || [];\r\n//               console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\r\n      \r\n//               // Set time labels once (for X-axis)\r\n//               if (i === 0 && volumeData.length > 0) {\r\n//                 timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\r\n//               }\r\n      \r\n//               // Accumulate the volume for each minute across all contracts\r\n//               volumeData.forEach((item, index) => {\r\n//                 volumes[index] = (volumes[index] || 0) + item.v;\r\n//               });\r\n//             }\r\n      \r\n//             setCumulativeVolumes(volumes);\r\n//             setTimeLabels(timeLabels);\r\n//             }  else {\r\n//                 console.log(\"No contracts found within the 10 above and below strike price range.\");\r\n//               }\r\n\r\n//       } catch (err) {\r\n//         console.error('Error fetching data:', err);\r\n//         setError('Failed to load data');\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchStockDataAndOptions();\r\n\r\n//     const interval = setInterval(() => {\r\n//       fetchStockDataAndOptions();\r\n//     }, 60000); // Update every 60 seconds\r\n\r\n//     return () => clearInterval(interval);\r\n//   }, [stockSymbol]);\r\n\r\n//   // Helper function to get today’s date\r\n//   const getTodayDate = () => {\r\n//     const today = new Date();\r\n//     return today.toISOString().split('T')[0];\r\n//   };\r\n\r\n//   // Line chart data for stock price\r\n//   const stockChartData = {\r\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//         backgroundColor: 'rgba(75,192,192,0.2)',\r\n//         fill: false,\r\n//         tension: 0.1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Bar chart data for cumulative options volume\r\n//   const optionsVolumeChartData = {\r\n//     labels: timeLabels, // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Cumulative Volume',\r\n//         data: cumulativeVolumes, // Y-axis (volume)\r\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n//         borderColor: 'rgba(75, 192, 192, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h2>Stock and Options Tracker</h2>\r\n\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <label>\r\n//           Stock Symbol:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={stockSymbol}\r\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n//             style={{ marginLeft: '10px' }}\r\n//           />\r\n//         </label>\r\n//       </div>\r\n\r\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n//       </button>\r\n\r\n//       {loading && <p>Loading data...</p>}\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n//       <div style={{ marginTop: '30px' }}>\r\n//         <h3>Stock Price Data for {stockSymbol}</h3>\r\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\r\n//         {cumulativeVolumes.length > 0 ? (\r\n//           <Bar data={optionsVolumeChartData} />\r\n//         ) : (\r\n//           <p>No cumulative volume data available</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockOptionsTracker;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto';\r\n\r\n// const StockOptionsTracker = () => {\r\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\r\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\r\n//   const [stockData, setStockData] = useState([]); // Stock price data\r\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\r\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\r\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\r\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\r\n\r\n//   // Fetch stock data and options contracts\r\n//   useEffect(() => {\r\n//     const fetchStockDataAndOptions = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         // Fetch stock data for latest price\r\n//         const stockResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\r\n//         );\r\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\r\n//         setStockPrice(currentPrice);\r\n\r\n//         // Fetch stock price data for charting\r\n//         const stockPriceResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\r\n//         );\r\n//         setStockData(stockPriceResponse.data.results || []);\r\n\r\n//         // Fetch options contracts for the soonest expiration\r\n//         const optionsResponse = await axios.get(\r\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\r\n//         );\r\n//         const contracts = optionsResponse.data.results || [];\r\n\r\n//         // Find the soonest expiration date\r\n//         const soonestExpiryDate = contracts\r\n//           .map(contract => contract.expiration_date)\r\n//           .sort()[0];\r\n\r\n//         console.log(\"Soonest Expiry Date\", soonestExpiryDate);\r\n\r\n//         // Filter contracts based on strikes around current stock price (±10)\r\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\r\n\r\n//         // Find the closest strike price to the current price\r\n//         const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\r\n\r\n//         // Select 10 strikes below and 10 strikes above\r\n//         const start = Math.max(0, closestContractIndex - 10);\r\n//         const end = Math.min(sortedContracts.length, closestContractIndex + 10);\r\n//         const filteredContracts = sortedContracts.slice(start, end);\r\n\r\n//         console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\r\n//         setOptionContracts(filteredContracts);\r\n\r\n//         console.log(\"Current Price\", currentPrice);\r\n//         console.log(\"Filtered Contracts\", filteredContracts);\r\n\r\n//         // Fetch cumulative volume data for each contract\r\n//         if (filteredContracts.length > 0) {\r\n//           const volumes = [];\r\n//           const timeLabels = [];\r\n//           for (let i = 0; i < filteredContracts.length; i++) {\r\n//             const contract = filteredContracts[i];\r\n//             const volumeResponse = await axios.get(\r\n//               `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\r\n//             );\r\n//             const volumeData = volumeResponse.data.results || [];\r\n//             console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\r\n\r\n//             // Set time labels once (for X-axis)\r\n//             if (i === 0 && volumeData.length > 0) {\r\n//               timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\r\n//             }\r\n\r\n//             // Accumulate the volume for each minute across all contracts\r\n//             volumeData.forEach((item, index) => {\r\n//               volumes[index] = (volumes[index] || 0) + item.v;\r\n//             });\r\n//           }\r\n\r\n//           setCumulativeVolumes(volumes);\r\n//           setTimeLabels(timeLabels);\r\n//         } else {\r\n//           console.log(\"No contracts found within the 10 above and below strike price range.\");\r\n//         }\r\n\r\n//       } catch (err) {\r\n//         console.error('Error fetching data:', err);\r\n//         setError('Failed to load data');\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchStockDataAndOptions();\r\n\r\n//     const interval = setInterval(() => {\r\n//       fetchStockDataAndOptions();\r\n//     }, 60000); // Update every 60 seconds\r\n\r\n//     return () => clearInterval(interval);\r\n//   }, [stockSymbol]);\r\n\r\n//   // Helper function to get today’s date\r\n//   const getTodayDate = () => {\r\n//     const today = new Date();\r\n//     return today.toISOString().split('T')[0];\r\n//   };\r\n\r\n//   // Line chart data for stock price\r\n//   const stockChartData = {\r\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//         backgroundColor: 'rgba(75,192,192,0.2)',\r\n//         fill: false,\r\n//         tension: 0.1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Bar chart data for cumulative options volume\r\n//   const optionsVolumeChartData = {\r\n//     labels: timeLabels, // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Cumulative Volume',\r\n//         data: cumulativeVolumes, // Y-axis (volume)\r\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n//         borderColor: 'rgba(75, 192, 192, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h2>Stock and Options Tracker</h2>\r\n\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <label>\r\n//           Stock Symbol:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={stockSymbol}\r\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n//             style={{ marginLeft: '10px' }}\r\n//           />\r\n//         </label>\r\n//       </div>\r\n\r\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n//       </button>\r\n\r\n//       {loading && <p>Loading data...</p>}\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n//       <div style={{ marginTop: '30px' }}>\r\n//         <h3>Stock Price Data for {stockSymbol}</h3>\r\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\r\n//         {cumulativeVolumes.length > 0 ? (\r\n//           <Bar data={optionsVolumeChartData} />\r\n//         ) : (\r\n//           <p>No cumulative volume data available</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockOptionsTracker;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\n\r\n// Black-Scholes Greeks calculations\r\nconst blackScholesGreeks = (S, K, T, r, sigma, optionType) => {\r\n    const d1 = (Math.log(S / K) + (r + (sigma ** 2) / 2) * T) / (sigma * Math.sqrt(T));\r\n    const d2 = d1 - sigma * Math.sqrt(T);\r\n    const phi = (x) => (1 / Math.sqrt(2 * Math.PI)) * Math.exp(-0.5 * x ** 2);\r\n  \r\n    const delta = optionType === 'call' ? phi(d1) : phi(d1) - 1;\r\n    return { delta };\r\n  };\r\n\r\nconst StockOptionsTracker = () => {\r\n  const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\r\n  const [stockPrice, setStockPrice] = useState(0); // Latest stock price\r\n  const [stockData, setStockData] = useState([]); // Stock price data\r\n  const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\r\n  const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\r\n  const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\r\n  const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\r\n\r\n  // Fetch stock data and options contracts\r\n  useEffect(() => {\r\n    const fetchStockDataAndOptions = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        // Fetch stock data for latest price\r\n        const stockResponse = await axios.get(\r\n          `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\r\n        );\r\n        const currentPrice = stockResponse.data.ticker.lastTrade.p;\r\n        setStockPrice(currentPrice);\r\n\r\n        // Fetch stock price data for charting\r\n        const stockPriceResponse = await axios.get(\r\n          `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\r\n        );\r\n        setStockData(stockPriceResponse.data.results || []);\r\n\r\n        // Fetch options contracts for the soonest expiration\r\n        const optionsResponse = await axios.get(\r\n          `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\r\n        );\r\n        const contracts = optionsResponse.data.results || [];\r\n\r\n        // Find the soonest expiration date\r\n        const soonestExpiryDate = contracts\r\n          .map(contract => contract.expiration_date)\r\n          .sort()[0];\r\n\r\n        console.log(\"Soonest Expiry Date\", soonestExpiryDate);\r\n\r\n        // Filter contracts based on strikes around current stock price (±10)\r\n        const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\r\n\r\n        // Find the closest strike price to the current price\r\n        const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\r\n\r\n        // Select 10 strikes below and 10 strikes above\r\n        const start = Math.max(0, closestContractIndex - 10);\r\n        const end = Math.min(sortedContracts.length, closestContractIndex + 10);\r\n        const filteredContracts = sortedContracts.slice(start, end);\r\n\r\n        console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\r\n        setOptionContracts(filteredContracts);\r\n\r\n        console.log(\"Current Price\", currentPrice);\r\n        console.log(\"Filtered Contracts\", filteredContracts);\r\n\r\n        // Fetch cumulative volume data for each contract\r\n        if (filteredContracts.length > 0) {\r\n          const volumes = [];\r\n          const timeLabels = [];\r\n          for (let i = 0; i < filteredContracts.length; i++) {\r\n            const contract = filteredContracts[i];\r\n            const volumeResponse = await axios.get(\r\n              `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\r\n            );\r\n            const volumeData = volumeResponse.data.results || [];\r\n            console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\r\n\r\n            // Set time labels once (for X-axis)\r\n            if (i === 0 && volumeData.length > 0) {\r\n              timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\r\n            }\r\n\r\n            // Accumulate the volume for each minute across all contracts\r\n            volumeData.forEach((item, index) => {\r\n              volumes[index] = (volumes[index] || 0) + item.v;\r\n            });\r\n          }\r\n\r\n          setCumulativeVolumes(volumes);\r\n          setTimeLabels(timeLabels);\r\n        } else {\r\n          console.log(\"No contracts found within the 10 above and below strike price range.\");\r\n        }\r\n\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n        setError('Failed to load data');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchStockDataAndOptions();\r\n\r\n    const interval = setInterval(() => {\r\n      fetchStockDataAndOptions();\r\n    }, 60000); // Update every 60 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, [stockSymbol]);\r\n\r\n  // Helper function to get today’s date\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    return today.toISOString().split('T')[0];\r\n  };\r\n\r\n  // Line chart data for stock price\r\n  const stockChartData = {\r\n    labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\r\n    datasets: [\r\n      {\r\n        label: 'Stock Price',\r\n        data: stockData.map((item) => item.c), // Y-axis (stock price)\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        backgroundColor: 'rgba(75,192,192,0.2)',\r\n        fill: false,\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Bar chart data for cumulative options volume\r\n  const optionsVolumeChartData = {\r\n    labels: timeLabels, // X-axis (time)\r\n    datasets: [\r\n      {\r\n        label: 'Cumulative Volume',\r\n        data: cumulativeVolumes, // Y-axis (volume)\r\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h2>Stock and Options Tracker</h2>\r\n\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <label>\r\n//           Stock Symbol:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={stockSymbol}\r\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n//             style={{ marginLeft: '10px' }}\r\n//           />\r\n//         </label>\r\n//       </div>\r\n\r\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n//       </button>\r\n\r\n//       {loading && <p>Loading data...</p>}\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n//       <div style={{ marginTop: '30px' }}>\r\n//         <h3>Stock Price Data for {stockSymbol}</h3>\r\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\r\n//         {cumulativeVolumes.length > 0 ? (\r\n//           <Bar data={optionsVolumeChartData} />\r\n//         ) : (\r\n//           <p>No cumulative volume data available</p>\r\n//         )}\r\n\r\n        \r\n//       </div>\r\n//     </div>\r\n//   );\r\nreturn (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Stock and Options Tracker</h2>\r\n\r\n      <div style={{ marginBottom: '20px' }}>\r\n        <label>\r\n          Stock Symbol:\r\n          <input\r\n            type=\"text\"\r\n            value={stockSymbol}\r\n            onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n            style={{ marginLeft: '10px' }}\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n        {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n      </button>\r\n\r\n      {loading && <p>Loading data...</p>}\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n      <div style={{ marginTop: '30px' }}>\r\n        <h3>Stock Price Data for {stockSymbol}</h3>\r\n        <p>Current Price: ${stockPrice}</p>\r\n\r\n        <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume / Dollar Amount for Nearest Expiry</h3>\r\n        {Object.keys(cumulativeVolumes.calls).length > 0 ? (\r\n          <Bar data={optionsVolumeChartData} />\r\n        ) : (\r\n          <p>No cumulative volume data available</p>\r\n        )}\r\n\r\n        <h3 style={{ marginTop: '40px' }}>Option Chain with 1% Move Estimation</h3>\r\n        {optionContracts.length > 0 ? (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Strike</th>\r\n                <th>Call LTP</th>\r\n                <th>Put LTP</th>\r\n                <th>IV</th>\r\n                <th>1% Up Estimation</th>\r\n                <th>1% Down Estimation</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {optionContracts.map((contract) => {\r\n                const { delta } = blackScholesGreeks(stockPrice, contract.strike_price, 0.1, 0.01, contract.implied_volatility, contract.option_type);\r\n                const move1Up = contract.last_trade_price + (stockPrice * 0.01 * delta);\r\n                const move1Down = contract.last_trade_price - (stockPrice * 0.01 * delta);\r\n                return (\r\n                  <tr key={contract.ticker}>\r\n                    <td>{contract.strike_price}</td>\r\n                    <td>{contract.last_trade_price_call}</td>\r\n                    <td>{contract.last_trade_price_put}</td>\r\n                    <td>{contract.implied_volatility}%</td>\r\n                    <td>{move1Up.toFixed(2)}</td>\r\n                    <td>{move1Down.toFixed(2)}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        ) : (\r\n          <p>No option chain data available</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockOptionsTracker;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,GAAG,QAAQ,iBAAiB;AAC3C,OAAO,eAAe;;AAEtB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,kBAAkB,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,UAAU,KAAK;EAC1D,MAAMC,EAAE,GAAG,CAACC,IAAI,CAACC,GAAG,CAACR,CAAC,GAAGC,CAAC,CAAC,GAAG,CAACE,CAAC,GAAIC,KAAK,IAAI,CAAC,GAAI,CAAC,IAAIF,CAAC,KAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}