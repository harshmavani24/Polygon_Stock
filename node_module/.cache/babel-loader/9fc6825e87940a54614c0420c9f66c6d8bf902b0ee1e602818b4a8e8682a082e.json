{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\polygon_without_ws\\\\stock-tracker\\\\src\\\\components\\\\StockTracker.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto'; // Required for chart.js\n\n// const StockTracker = () => {\n//   const [symbol, setSymbol] = useState('');\n//   const [priceData, setPriceData] = useState([]);\n//   const [volumeData, setVolumeData] = useState([]);\n//   const [contractData, setContractData] = useState([]);\n//   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and dollar amount\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     fetchStockData(symbol);\n//   };\n\n//   const fetchStockData = async (symbol) => {\n//     try {\n//       const now = new Date();\n//       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n\n//       // Convert to YYYY-MM-DD format as required by Polygon API\n//       const fromDate = tenMinutesAgo.toISOString().split('T')[0]; \n//       const toDate = now.toISOString().split('T')[0]; \n\n//       // Fetch stock price data\n//       const priceResponse = await axios.get(\n//         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-22?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n//       );\n\n//       console.log(\"Price Response\",priceResponse.data.results);\n//       setPriceData(priceResponse.data.results || []); // Update your price data state\n\n//       // Fetch volume data for the closest expiry date\n//       const volumeResponse = await axios.get(\n//         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n//       );\n//       console.log(volumeResponse.data.results);\n\n//       setVolumeData(volumeResponse.data.results || []); // Update your volume data state\n//     } catch (error) {\n//       if (error.response && error.response.status === 429) {\n//         // Handle rate limiting (Too Many Requests)\n//         console.error(\"Rate limit exceeded. Please wait or upgrade your subscription.\");\n\n//         // Implement a retry after a delay (e.g., 60 seconds)\n//         setTimeout(() => {\n//           fetchStockData(symbol); // Retry fetching data after 60 seconds\n//         }, 6000); // Wait 60 seconds before retrying\n//       } else {\n//         console.error('Error fetching stock data:', error);\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (symbol) {\n//       const interval = setInterval(() => {\n//         fetchStockData(symbol);\n//       }, 5000); // Fetch every second\n//       return () => clearInterval(interval);\n//     }\n//   }, [symbol]);\n\n//   const priceChart = {\n//     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: priceData.map((entry) => entry.c),\n//         fill: false,\n//         backgroundColor: 'rgba(75,192,192,0.4)',\n//         borderColor: 'rgba(75,192,192,1)',\n//       },\n//     ],\n//   };\n\n//   const volumeChart = {\n//     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\n//     datasets: [\n//       {\n//         label: 'Call Volume',\n//         data: volumeData.map((entry) => entry.call_volume),\n//         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n//         borderColor: 'rgba(54, 162, 235, 1)',\n//         borderWidth: 1,\n//       },\n//       {\n//         label: 'Put Volume',\n//         data: volumeData.map((entry) => entry.put_volume),\n//         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n//         borderColor: 'rgba(255, 99, 132, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter Stock Symbol\"\n//           value={symbol}\n//           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n//         />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n\n//       {priceData.length > 0 && (\n//         <>\n//           <h2>{symbol} Stock Price</h2>\n//           <Line data={priceChart} />\n//         </>\n//       )}\n\n//       {volumeData.length > 0 && (\n//         <>\n//           <h2>Volume Data</h2>\n//           <Bar data={volumeChart} />\n//         </>\n//       )}\n\n//       <button onClick={() => setToggleVolume(!toggleVolume)}>\n//         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default StockTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto'; // Required for chart.js\n\n// const StockTracker = () => {\n//   const [symbol, setSymbol] = useState('');\n//   const [priceData, setPriceData] = useState([]);\n//   const [volumeData, setVolumeData] = useState([]);\n//   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\n//   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     fetchStockData(symbol);\n//   };\n\n//   const fetchStockData = async (symbol) => {\n//     try {\n//       const now = new Date();\n//       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n//       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n//       const toDate = now.toISOString().split('T')[0];\n\n//       // Fetch stock price data\n//       const priceResponse = await axios.get(\n//         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-20?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n//       );\n\n//       setPriceData(priceResponse.data.results || []);\n\n//       // Fetch volume data for the closest expiry date\n//       const volumeResponse = await axios.get(\n//         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n//       );\n\n//       setVolumeData(volumeResponse.data.results || []);\n\n//     //   // Fetch Greeks (Delta, Gamma, Vega) and Strike Prices for options 10 above/below\n//     //   const strikeResponse = await axios.get(\n//     //     `https://api.polygon.io/v1/reference/options/greeks/${symbol}?apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n//     //   );\n\n//     //   setStrikeData(strikeResponse.data.results || []);\n\n//     } catch (error) {\n//       console.error('Error fetching stock data:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (symbol) {\n//       const interval = setInterval(() => {\n//         fetchStockData(symbol);\n//       }, 1000); // Fetch every second\n//       return () => clearInterval(interval);\n//     }\n//   }, [symbol]);\n\n//   // Function to calculate Dollar Amount based on Volume and Contract Price\n//   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n//   const priceChart = {\n//     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: priceData.map((entry) => entry.c),\n//         fill: false,\n//         backgroundColor: 'rgba(75,192,192,0.4)',\n//         borderColor: 'rgba(75,192,192,1)',\n//       },\n//     ],\n//   };\n\n//   const volumeChart = {\n//     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleDateString()), // Using date for better accuracy\n//     datasets: [\n//       {\n//         label: 'Call Volume',\n//         data: volumeData.map((entry) => \n//           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume),\n//         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n//         borderColor: 'rgba(54, 162, 235, 1)',\n//         borderWidth: 1,\n//       },\n//       {\n//         label: 'Put Volume',\n//         data: volumeData.map((entry) => \n//           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume),\n//         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n//         borderColor: 'rgba(255, 99, 132, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   // Function to calculate percentage movement using Greeks\n//   const calculatePriceImpact = (greeks, priceChange) => {\n//     const delta = greeks.delta || 0;\n//     const gamma = greeks.gamma || 0;\n//     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter Stock Symbol\"\n//           value={symbol}\n//           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n//         />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n\n//       {priceData.length > 0 && (\n//         <>\n//           <h2>{symbol} Stock Price</h2>\n//           <Line data={priceChart} />\n//         </>\n//       )}\n\n//       {volumeData.length > 0 && (\n//         <>\n//           <h2>Volume Data</h2>\n//           <Bar data={volumeChart} />\n//         </>\n//       )}\n\n//       {strikeData.length > 0 && (\n//         <>\n//           <h2>Strike Price Data with Greeks</h2>\n//           <ul>\n//             {strikeData.map((strike) => (\n//               <li key={strike.id}>\n//                 Strike: {strike.strike_price}, Delta: {strike.delta}, \n//                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \n//                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\n//               </li>\n//             ))}\n//           </ul>\n//         </>\n//       )}\n\n//       <button onClick={() => setToggleVolume(!toggleVolume)}>\n//         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default StockTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto'; // Required for chart.js\n\n// const StockTracker = () => {\n//   const [symbol, setSymbol] = useState('');\n//   const [priceData, setPriceData] = useState([]);\n//   const [volumeData, setVolumeData] = useState([]);\n//   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\n//   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     fetchStockData(symbol);\n//   };\n\n//   const fetchStockData = async (symbol) => {\n//     try {\n//       const now = new Date();\n//       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n//       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n//       const toDate = now.toISOString().split('T')[0];\n\n//       // Fetch stock price data\n//       const priceResponse = await axios.get(\n//         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n//       );\n\n//       setPriceData(priceResponse.data.results || []);\n\n//       // Fetch volume data for the closest expiry date\n//       const volumeResponse = await axios.get(\n//         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n//       );\n\n//       setVolumeData(volumeResponse.data.results || []);\n\n//     } catch (error) {\n//       console.error('Error fetching stock data:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (symbol) {\n//       const interval = setInterval(() => {\n//         fetchStockData(symbol);\n//       }, 1000); // Fetch every second\n//       return () => clearInterval(interval);\n//     }\n//   }, [symbol]);\n\n//   // Function to calculate Dollar Amount based on Volume and Contract Price\n//   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n//   // Price chart configuration\n//   const priceChart = {\n//     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: priceData.map((entry) => entry.c),\n//         fill: false,\n//         backgroundColor: 'rgba(75,192,192,0.4)',\n//         borderColor: 'rgba(75,192,192,1)',\n//       },\n//     ],\n//   };\n\n//   // Volume chart configuration with updated data based on `toggleVolume`\n//   const volumeChart = {\n//     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\n//     datasets: [\n//       {\n//         label: 'Call Volume',\n//         data: volumeData.map((entry) =>\n//           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\n//         ),\n//         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n//         borderColor: 'rgba(54, 162, 235, 1)',\n//         borderWidth: 1,\n//       },\n//       {\n//         label: 'Put Volume',\n//         data: volumeData.map((entry) =>\n//           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\n//         ),\n//         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n//         borderColor: 'rgba(255, 99, 132, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   // Function to calculate percentage movement using Greeks\n//   const calculatePriceImpact = (greeks, priceChange) => {\n//     const delta = greeks.delta || 0;\n//     const gamma = greeks.gamma || 0;\n//     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter Stock Symbol\"\n//           value={symbol}\n//           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n//         />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n\n//       {priceData.length > 0 && (\n//         <>\n//           <h2>{symbol} Stock Price</h2>\n//           <Line data={priceChart} />\n//         </>\n//       )}\n\n//       {volumeData.length > 0 && (\n//         <>\n//           <h2>Volume Data</h2>\n//           <Bar data={volumeChart} />\n//         </>\n//       )}\n\n//       {strikeData.length > 0 && (\n//         <>\n//           <h2>Strike Price Data with Greeks</h2>\n//           <ul>\n//             {strikeData.map((strike) => (\n//               <li key={strike.id}>\n//                 Strike: {strike.strike_price}, Delta: {strike.delta}, \n//                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \n//                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\n//               </li>\n//             ))}\n//           </ul>\n//         </>\n//       )}\n\n//       {/* Toggle Button */}\n//       <button onClick={() => setToggleVolume(!toggleVolume)}>\n//         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default StockTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto'; // Required for chart.js\n\n// const StockTracker = () => {\n//   const [symbol, setSymbol] = useState('');\n//   const [priceData, setPriceData] = useState([]);\n//   const [volumeData, setVolumeData] = useState([]);\n//   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\n//   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     fetchStockData(symbol);\n//   };\n\n//   const fetchStockData = async (symbol) => {\n//     try {\n//       const now = new Date();\n//       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n//       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n//       const toDate = now.toISOString().split('T')[0];\n\n//       // Fetch stock price data\n//       const priceResponse = await axios.get(\n//         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n//       );\n\n//       setPriceData(priceResponse.data.results || []);\n\n//       // Fetch volume data for the closest expiry date\n//       const volumeResponse = await axios.get(\n//         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n//       );\n//       console.log(volumeResponse.data.results);\n\n//       setVolumeData(volumeResponse.data.results || []);\n\n//     } catch (error) {\n//       console.error('Error fetching stock data:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (symbol) {\n//       const interval = setInterval(() => {\n//         fetchStockData(symbol);\n//       }, 1000); // Fetch every second\n//       return () => clearInterval(interval);\n//     }\n//   }, [symbol]);\n\n//   // Function to calculate Dollar Amount based on Volume and Contract Price\n//   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n//   // Price chart configuration\n//   const priceChart = {\n//     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: priceData.map((entry) => entry.c),\n//         fill: false,\n//         backgroundColor: 'rgba(75,192,192,0.4)',\n//         borderColor: 'rgba(75,192,192,1)',\n//       },\n//     ],\n//   };\n\n//   // Volume chart configuration with updated data based on `toggleVolume`\n//   const volumeChart = {\n//     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\n//     datasets: [\n//       {\n//         label: 'Call Volume',\n//         data: volumeData.map((entry) =>\n//           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\n//         ),\n//         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n//         borderColor: 'rgba(54, 162, 235, 1)',\n//         borderWidth: 1,\n//       },\n//       {\n//         label: 'Put Volume',\n//         data: volumeData.map((entry) =>\n//           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\n//         ),\n//         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n//         borderColor: 'rgba(255, 99, 132, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   // Function to calculate percentage movement using Greeks\n//   const calculatePriceImpact = (greeks, priceChange) => {\n//     const delta = greeks.delta || 0;\n//     const gamma = greeks.gamma || 0;\n//     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\n//   };\n\n//   const handleToggleVolume = () => {\n//     setToggleVolume((prevState) => {\n//       const newToggleState = !prevState;\n//       console.log('Toggle Volume Button Clicked: ', newToggleState);\n//       console.log('Volume Data: ', volumeData);\n//       console.log('Price Data: ', priceData);\n//       return newToggleState;\n//     });\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter Stock Symbol\"\n//           value={symbol}\n//           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n//         />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n\n//       {/* Display stock price graph */}\n//       {priceData.length > 0 && (\n//         <>\n//           <h2>{symbol} Stock Price</h2>\n//           <Line data={priceChart} />\n//         </>\n//       )}\n\n//       {/* Display volume/dollar amount graph */}\n//       {volumeData.length > 0 && (\n//         <>\n//           <h2>Volume Data</h2>\n//           <Bar data={volumeChart} />\n//         </>\n//       )}\n\n//       {/* Display strike data */}\n//       {strikeData.length > 0 && (\n//         <>\n//           <h2>Strike Price Data with Greeks</h2>\n//           <ul>\n//             {strikeData.map((strike) => (\n//               <li key={strike.id}>\n//                 Strike: {strike.strike_price}, Delta: {strike.delta}, \n//                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \n//                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\n//               </li>\n//             ))}\n//           </ul>\n//         </>\n//       )}\n\n//       {/* Toggle button to switch between volume and dollar amount */}\n//       <button onClick={handleToggleVolume}>\n//         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default StockTracker;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line, Bar } from 'react-chartjs-2';\nimport 'chart.js/auto'; // Required for chart.js\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StockTracker = () => {\n  _s();\n  const [symbol, setSymbol] = useState('');\n  const [priceData, setPriceData] = useState([]);\n  const [optionData, setOptionData] = useState([]); // For storing option data\n  const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetchStockData(symbol);\n  };\n  const fetchStockData = async symbol => {\n    try {\n      const now = new Date();\n      const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n      const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n      const toDate = now.toISOString().split('T')[0];\n\n      // Fetch stock price data\n      const priceResponse = await axios.get(`https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`);\n      setPriceData(priceResponse.data.results || []);\n\n      // Fetch option data from your provided API URL\n      const optionResponse = await axios.get(`https://api.polygon.io/v2/aggs/ticker/O:${symbol}251219C00650000/range/1/day/2024-09-10/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`);\n      setOptionData(optionResponse.data.results || []); // Store option data\n    } catch (error) {\n      console.error('Error fetching stock or option data:', error);\n    }\n  };\n  useEffect(() => {\n    if (symbol) {\n      const interval = setInterval(() => {\n        fetchStockData(symbol);\n      }, 1000); // Fetch every second\n      return () => clearInterval(interval);\n    }\n  }, [symbol]);\n\n  // Function to calculate Dollar Amount based on Volume and Contract Price\n  const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n  // Price chart configuration\n  const priceChart = {\n    labels: priceData.map(entry => new Date(entry.t).toLocaleTimeString()),\n    datasets: [{\n      label: 'Stock Price',\n      data: priceData.map(entry => entry.c),\n      fill: false,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)'\n    }]\n  };\n\n  // Option data chart configuration\n  const optionChart = {\n    labels: optionData.map(entry => new Date(entry.t).toLocaleDateString()),\n    datasets: [{\n      label: 'Option Close Price',\n      data: optionData.map(entry => entry.c),\n      fill: false,\n      backgroundColor: 'rgba(153,102,255,0.4)',\n      borderColor: 'rgba(153,102,255,1)'\n    }]\n  };\n\n  // Function to toggle between showing volume or dollar amount in option chart\n  const handleToggleVolume = () => {\n    setToggleVolume(prevState => !prevState);\n    console.log('Toggle Volume Button Clicked:', toggleVolume);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Stock Symbol\",\n        value: symbol,\n        onChange: e => setSymbol(e.target.value.toUpperCase())\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 7\n    }, this), priceData.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [symbol, \" Stock Price\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: priceChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), optionData.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Option Data (O:SPY251219C00650000)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: optionChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleToggleVolume,\n      children: toggleVolume ? 'Show Volume' : 'Show $ Amount'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 697,\n    columnNumber: 5\n  }, this);\n};\n_s(StockTracker, \"838hvOZZl6jyTo3qBAiDKFvUQSU=\");\n_c = StockTracker;\nexport default StockTracker;\nvar _c;\n$RefreshReg$(_c, \"StockTracker\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","Bar","jsxDEV","_jsxDEV","Fragment","_Fragment","StockTracker","_s","symbol","setSymbol","priceData","setPriceData","optionData","setOptionData","toggleVolume","setToggleVolume","handleSubmit","e","preventDefault","fetchStockData","now","Date","tenMinutesAgo","getTime","fromDate","toISOString","split","toDate","priceResponse","get","data","results","optionResponse","error","console","interval","setInterval","clearInterval","calculateDollarAmount","volume","contractPrice","priceChart","labels","map","entry","t","toLocaleTimeString","datasets","label","c","fill","backgroundColor","borderColor","optionChart","toLocaleDateString","handleToggleVolume","prevState","log","children","onSubmit","type","placeholder","value","onChange","target","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/polygon_without_ws/stock-tracker/src/components/StockTracker.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto'; // Required for chart.js\r\n\r\n// const StockTracker = () => {\r\n//   const [symbol, setSymbol] = useState('');\r\n//   const [priceData, setPriceData] = useState([]);\r\n//   const [volumeData, setVolumeData] = useState([]);\r\n//   const [contractData, setContractData] = useState([]);\r\n//   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and dollar amount\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     fetchStockData(symbol);\r\n//   };\r\n\r\n//   const fetchStockData = async (symbol) => {\r\n//     try {\r\n//       const now = new Date();\r\n//       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n      \r\n//       // Convert to YYYY-MM-DD format as required by Polygon API\r\n//       const fromDate = tenMinutesAgo.toISOString().split('T')[0]; \r\n//       const toDate = now.toISOString().split('T')[0]; \r\n  \r\n//       // Fetch stock price data\r\n//       const priceResponse = await axios.get(\r\n//         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-22?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n//       );\r\n      \r\n//       console.log(\"Price Response\",priceResponse.data.results);\r\n//       setPriceData(priceResponse.data.results || []); // Update your price data state\r\n  \r\n//       // Fetch volume data for the closest expiry date\r\n//       const volumeResponse = await axios.get(\r\n//         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n//       );\r\n//       console.log(volumeResponse.data.results);\r\n  \r\n//       setVolumeData(volumeResponse.data.results || []); // Update your volume data state\r\n//     } catch (error) {\r\n//       if (error.response && error.response.status === 429) {\r\n//         // Handle rate limiting (Too Many Requests)\r\n//         console.error(\"Rate limit exceeded. Please wait or upgrade your subscription.\");\r\n        \r\n//         // Implement a retry after a delay (e.g., 60 seconds)\r\n//         setTimeout(() => {\r\n//           fetchStockData(symbol); // Retry fetching data after 60 seconds\r\n//         }, 6000); // Wait 60 seconds before retrying\r\n//       } else {\r\n//         console.error('Error fetching stock data:', error);\r\n//       }\r\n//     }\r\n//   };\r\n  \r\n\r\n//   useEffect(() => {\r\n//     if (symbol) {\r\n//       const interval = setInterval(() => {\r\n//         fetchStockData(symbol);\r\n//       }, 5000); // Fetch every second\r\n//       return () => clearInterval(interval);\r\n//     }\r\n//   }, [symbol]);\r\n\r\n//   const priceChart = {\r\n//     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: priceData.map((entry) => entry.c),\r\n//         fill: false,\r\n//         backgroundColor: 'rgba(75,192,192,0.4)',\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   const volumeChart = {\r\n//     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Call Volume',\r\n//         data: volumeData.map((entry) => entry.call_volume),\r\n//         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n//         borderColor: 'rgba(54, 162, 235, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//       {\r\n//         label: 'Put Volume',\r\n//         data: volumeData.map((entry) => entry.put_volume),\r\n//         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n//         borderColor: 'rgba(255, 99, 132, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter Stock Symbol\"\r\n//           value={symbol}\r\n//           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n//         />\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n\r\n//       {priceData.length > 0 && (\r\n//         <>\r\n//           <h2>{symbol} Stock Price</h2>\r\n//           <Line data={priceChart} />\r\n//         </>\r\n//       )}\r\n\r\n//       {volumeData.length > 0 && (\r\n//         <>\r\n//           <h2>Volume Data</h2>\r\n//           <Bar data={volumeChart} />\r\n//         </>\r\n//       )}\r\n\r\n//       <button onClick={() => setToggleVolume(!toggleVolume)}>\r\n//         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockTracker;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto'; // Required for chart.js\r\n\r\n// const StockTracker = () => {\r\n//   const [symbol, setSymbol] = useState('');\r\n//   const [priceData, setPriceData] = useState([]);\r\n//   const [volumeData, setVolumeData] = useState([]);\r\n//   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\r\n//   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     fetchStockData(symbol);\r\n//   };\r\n\r\n//   const fetchStockData = async (symbol) => {\r\n//     try {\r\n//       const now = new Date();\r\n//       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n//       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n//       const toDate = now.toISOString().split('T')[0];\r\n  \r\n//       // Fetch stock price data\r\n//       const priceResponse = await axios.get(\r\n//         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-20?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n//       );\r\n      \r\n//       setPriceData(priceResponse.data.results || []);\r\n  \r\n//       // Fetch volume data for the closest expiry date\r\n//       const volumeResponse = await axios.get(\r\n//         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n//       );\r\n  \r\n//       setVolumeData(volumeResponse.data.results || []);\r\n\r\n//     //   // Fetch Greeks (Delta, Gamma, Vega) and Strike Prices for options 10 above/below\r\n//     //   const strikeResponse = await axios.get(\r\n//     //     `https://api.polygon.io/v1/reference/options/greeks/${symbol}?apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n//     //   );\r\n  \r\n//     //   setStrikeData(strikeResponse.data.results || []);\r\n      \r\n//     } catch (error) {\r\n//       console.error('Error fetching stock data:', error);\r\n//     }\r\n//   };\r\n  \r\n//   useEffect(() => {\r\n//     if (symbol) {\r\n//       const interval = setInterval(() => {\r\n//         fetchStockData(symbol);\r\n//       }, 1000); // Fetch every second\r\n//       return () => clearInterval(interval);\r\n//     }\r\n//   }, [symbol]);\r\n\r\n//   // Function to calculate Dollar Amount based on Volume and Contract Price\r\n//   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n//   const priceChart = {\r\n//     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: priceData.map((entry) => entry.c),\r\n//         fill: false,\r\n//         backgroundColor: 'rgba(75,192,192,0.4)',\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   const volumeChart = {\r\n//     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleDateString()), // Using date for better accuracy\r\n//     datasets: [\r\n//       {\r\n//         label: 'Call Volume',\r\n//         data: volumeData.map((entry) => \r\n//           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume),\r\n//         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n//         borderColor: 'rgba(54, 162, 235, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//       {\r\n//         label: 'Put Volume',\r\n//         data: volumeData.map((entry) => \r\n//           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume),\r\n//         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n//         borderColor: 'rgba(255, 99, 132, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Function to calculate percentage movement using Greeks\r\n//   const calculatePriceImpact = (greeks, priceChange) => {\r\n//     const delta = greeks.delta || 0;\r\n//     const gamma = greeks.gamma || 0;\r\n//     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter Stock Symbol\"\r\n//           value={symbol}\r\n//           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n//         />\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n\r\n//       {priceData.length > 0 && (\r\n//         <>\r\n//           <h2>{symbol} Stock Price</h2>\r\n//           <Line data={priceChart} />\r\n//         </>\r\n//       )}\r\n\r\n//       {volumeData.length > 0 && (\r\n//         <>\r\n//           <h2>Volume Data</h2>\r\n//           <Bar data={volumeChart} />\r\n//         </>\r\n//       )}\r\n\r\n//       {strikeData.length > 0 && (\r\n//         <>\r\n//           <h2>Strike Price Data with Greeks</h2>\r\n//           <ul>\r\n//             {strikeData.map((strike) => (\r\n//               <li key={strike.id}>\r\n//                 Strike: {strike.strike_price}, Delta: {strike.delta}, \r\n//                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \r\n//                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//         </>\r\n//       )}\r\n\r\n//       <button onClick={() => setToggleVolume(!toggleVolume)}>\r\n//         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockTracker;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto'; // Required for chart.js\r\n\r\n// const StockTracker = () => {\r\n//   const [symbol, setSymbol] = useState('');\r\n//   const [priceData, setPriceData] = useState([]);\r\n//   const [volumeData, setVolumeData] = useState([]);\r\n//   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\r\n//   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     fetchStockData(symbol);\r\n//   };\r\n\r\n//   const fetchStockData = async (symbol) => {\r\n//     try {\r\n//       const now = new Date();\r\n//       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n//       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n//       const toDate = now.toISOString().split('T')[0];\r\n\r\n//       // Fetch stock price data\r\n//       const priceResponse = await axios.get(\r\n//         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n//       );\r\n\r\n//       setPriceData(priceResponse.data.results || []);\r\n\r\n//       // Fetch volume data for the closest expiry date\r\n//       const volumeResponse = await axios.get(\r\n//         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n//       );\r\n\r\n//       setVolumeData(volumeResponse.data.results || []);\r\n      \r\n//     } catch (error) {\r\n//       console.error('Error fetching stock data:', error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (symbol) {\r\n//       const interval = setInterval(() => {\r\n//         fetchStockData(symbol);\r\n//       }, 1000); // Fetch every second\r\n//       return () => clearInterval(interval);\r\n//     }\r\n//   }, [symbol]);\r\n\r\n//   // Function to calculate Dollar Amount based on Volume and Contract Price\r\n//   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n//   // Price chart configuration\r\n//   const priceChart = {\r\n//     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: priceData.map((entry) => entry.c),\r\n//         fill: false,\r\n//         backgroundColor: 'rgba(75,192,192,0.4)',\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Volume chart configuration with updated data based on `toggleVolume`\r\n//   const volumeChart = {\r\n//     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Call Volume',\r\n//         data: volumeData.map((entry) =>\r\n//           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\r\n//         ),\r\n//         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n//         borderColor: 'rgba(54, 162, 235, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//       {\r\n//         label: 'Put Volume',\r\n//         data: volumeData.map((entry) =>\r\n//           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\r\n//         ),\r\n//         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n//         borderColor: 'rgba(255, 99, 132, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Function to calculate percentage movement using Greeks\r\n//   const calculatePriceImpact = (greeks, priceChange) => {\r\n//     const delta = greeks.delta || 0;\r\n//     const gamma = greeks.gamma || 0;\r\n//     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter Stock Symbol\"\r\n//           value={symbol}\r\n//           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n//         />\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n\r\n//       {priceData.length > 0 && (\r\n//         <>\r\n//           <h2>{symbol} Stock Price</h2>\r\n//           <Line data={priceChart} />\r\n//         </>\r\n//       )}\r\n\r\n//       {volumeData.length > 0 && (\r\n//         <>\r\n//           <h2>Volume Data</h2>\r\n//           <Bar data={volumeChart} />\r\n//         </>\r\n//       )}\r\n\r\n//       {strikeData.length > 0 && (\r\n//         <>\r\n//           <h2>Strike Price Data with Greeks</h2>\r\n//           <ul>\r\n//             {strikeData.map((strike) => (\r\n//               <li key={strike.id}>\r\n//                 Strike: {strike.strike_price}, Delta: {strike.delta}, \r\n//                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \r\n//                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//         </>\r\n//       )}\r\n\r\n//       {/* Toggle Button */}\r\n//       <button onClick={() => setToggleVolume(!toggleVolume)}>\r\n//         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockTracker;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto'; // Required for chart.js\r\n\r\n// const StockTracker = () => {\r\n//   const [symbol, setSymbol] = useState('');\r\n//   const [priceData, setPriceData] = useState([]);\r\n//   const [volumeData, setVolumeData] = useState([]);\r\n//   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\r\n//   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     fetchStockData(symbol);\r\n//   };\r\n\r\n//   const fetchStockData = async (symbol) => {\r\n//     try {\r\n//       const now = new Date();\r\n//       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n//       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n//       const toDate = now.toISOString().split('T')[0];\r\n\r\n//       // Fetch stock price data\r\n//       const priceResponse = await axios.get(\r\n//         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n//       );\r\n\r\n//       setPriceData(priceResponse.data.results || []);\r\n\r\n//       // Fetch volume data for the closest expiry date\r\n//       const volumeResponse = await axios.get(\r\n//         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n//       );\r\n//       console.log(volumeResponse.data.results);\r\n\r\n//       setVolumeData(volumeResponse.data.results || []);\r\n      \r\n//     } catch (error) {\r\n//       console.error('Error fetching stock data:', error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (symbol) {\r\n//       const interval = setInterval(() => {\r\n//         fetchStockData(symbol);\r\n//       }, 1000); // Fetch every second\r\n//       return () => clearInterval(interval);\r\n//     }\r\n//   }, [symbol]);\r\n\r\n//   // Function to calculate Dollar Amount based on Volume and Contract Price\r\n//   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n//   // Price chart configuration\r\n//   const priceChart = {\r\n//     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: priceData.map((entry) => entry.c),\r\n//         fill: false,\r\n//         backgroundColor: 'rgba(75,192,192,0.4)',\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Volume chart configuration with updated data based on `toggleVolume`\r\n//   const volumeChart = {\r\n//     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Call Volume',\r\n//         data: volumeData.map((entry) =>\r\n//           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\r\n//         ),\r\n//         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n//         borderColor: 'rgba(54, 162, 235, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//       {\r\n//         label: 'Put Volume',\r\n//         data: volumeData.map((entry) =>\r\n//           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\r\n//         ),\r\n//         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n//         borderColor: 'rgba(255, 99, 132, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Function to calculate percentage movement using Greeks\r\n//   const calculatePriceImpact = (greeks, priceChange) => {\r\n//     const delta = greeks.delta || 0;\r\n//     const gamma = greeks.gamma || 0;\r\n//     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\r\n//   };\r\n\r\n//   const handleToggleVolume = () => {\r\n//     setToggleVolume((prevState) => {\r\n//       const newToggleState = !prevState;\r\n//       console.log('Toggle Volume Button Clicked: ', newToggleState);\r\n//       console.log('Volume Data: ', volumeData);\r\n//       console.log('Price Data: ', priceData);\r\n//       return newToggleState;\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter Stock Symbol\"\r\n//           value={symbol}\r\n//           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n//         />\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n\r\n//       {/* Display stock price graph */}\r\n//       {priceData.length > 0 && (\r\n//         <>\r\n//           <h2>{symbol} Stock Price</h2>\r\n//           <Line data={priceChart} />\r\n//         </>\r\n//       )}\r\n\r\n//       {/* Display volume/dollar amount graph */}\r\n//       {volumeData.length > 0 && (\r\n//         <>\r\n//           <h2>Volume Data</h2>\r\n//           <Bar data={volumeChart} />\r\n//         </>\r\n//       )}\r\n\r\n//       {/* Display strike data */}\r\n//       {strikeData.length > 0 && (\r\n//         <>\r\n//           <h2>Strike Price Data with Greeks</h2>\r\n//           <ul>\r\n//             {strikeData.map((strike) => (\r\n//               <li key={strike.id}>\r\n//                 Strike: {strike.strike_price}, Delta: {strike.delta}, \r\n//                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \r\n//                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//         </>\r\n//       )}\r\n\r\n//       {/* Toggle button to switch between volume and dollar amount */}\r\n//       <button onClick={handleToggleVolume}>\r\n//         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockTracker;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport 'chart.js/auto'; // Required for chart.js\r\n\r\nconst StockTracker = () => {\r\n  const [symbol, setSymbol] = useState('');\r\n  const [priceData, setPriceData] = useState([]);\r\n  const [optionData, setOptionData] = useState([]); // For storing option data\r\n  const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchStockData(symbol);\r\n  };\r\n\r\n  const fetchStockData = async (symbol) => {\r\n    try {\r\n      const now = new Date();\r\n      const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n      const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n      const toDate = now.toISOString().split('T')[0];\r\n\r\n      // Fetch stock price data\r\n      const priceResponse = await axios.get(\r\n        `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n      );\r\n      \r\n      setPriceData(priceResponse.data.results || []);\r\n\r\n      // Fetch option data from your provided API URL\r\n      const optionResponse = await axios.get(\r\n        `https://api.polygon.io/v2/aggs/ticker/O:${symbol}251219C00650000/range/1/day/2024-09-10/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n      );\r\n\r\n      setOptionData(optionResponse.data.results || []); // Store option data\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching stock or option data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (symbol) {\r\n      const interval = setInterval(() => {\r\n        fetchStockData(symbol);\r\n      }, 1000); // Fetch every second\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [symbol]);\r\n\r\n  // Function to calculate Dollar Amount based on Volume and Contract Price\r\n  const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n  // Price chart configuration\r\n  const priceChart = {\r\n    labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n    datasets: [\r\n      {\r\n        label: 'Stock Price',\r\n        data: priceData.map((entry) => entry.c),\r\n        fill: false,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Option data chart configuration\r\n  const optionChart = {\r\n    labels: optionData.map((entry) => new Date(entry.t).toLocaleDateString()),\r\n    datasets: [\r\n      {\r\n        label: 'Option Close Price',\r\n        data: optionData.map((entry) => entry.c),\r\n        fill: false,\r\n        backgroundColor: 'rgba(153,102,255,0.4)',\r\n        borderColor: 'rgba(153,102,255,1)',\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Function to toggle between showing volume or dollar amount in option chart\r\n  const handleToggleVolume = () => {\r\n    setToggleVolume((prevState) => !prevState);\r\n    console.log('Toggle Volume Button Clicked:', toggleVolume);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Stock Symbol\"\r\n          value={symbol}\r\n          onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n        />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n\r\n      {/* Display stock price graph */}\r\n      {priceData.length > 0 && (\r\n        <>\r\n          <h2>{symbol} Stock Price</h2>\r\n          <Line data={priceChart} />\r\n        </>\r\n      )}\r\n\r\n      {/* Display option data graph */}\r\n      {optionData.length > 0 && (\r\n        <>\r\n          <h2>Option Data (O:SPY251219C00650000)</h2>\r\n          <Line data={optionChart} />\r\n        </>\r\n      )}\r\n\r\n      {/* Toggle button to switch between volume and dollar amount */}\r\n      <button onClick={handleToggleVolume}>\r\n        {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockTracker;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}