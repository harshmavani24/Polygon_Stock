{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\polygon_without_ws\\\\stock-tracker\\\\src\\\\components\\\\StockTracker.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { Line, Bar } from 'react-chartjs-2';\n// // import 'chart.js/auto'; // Required for chart.js\n\n// // const StockTracker = () => {\n// //   const [symbol, setSymbol] = useState('');\n// //   const [priceData, setPriceData] = useState([]);\n// //   const [volumeData, setVolumeData] = useState([]);\n// //   const [contractData, setContractData] = useState([]);\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and dollar amount\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n// //     fetchStockData(symbol);\n// //   };\n\n// //   const fetchStockData = async (symbol) => {\n// //     try {\n// //       const now = new Date();\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n\n// //       // Convert to YYYY-MM-DD format as required by Polygon API\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0]; \n// //       const toDate = now.toISOString().split('T')[0]; \n\n// //       // Fetch stock price data\n// //       const priceResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-22?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       console.log(\"Price Response\",priceResponse.data.results);\n// //       setPriceData(priceResponse.data.results || []); // Update your price data state\n\n// //       // Fetch volume data for the closest expiry date\n// //       const volumeResponse = await axios.get(\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n// //       console.log(volumeResponse.data.results);\n\n// //       setVolumeData(volumeResponse.data.results || []); // Update your volume data state\n// //     } catch (error) {\n// //       if (error.response && error.response.status === 429) {\n// //         // Handle rate limiting (Too Many Requests)\n// //         console.error(\"Rate limit exceeded. Please wait or upgrade your subscription.\");\n\n// //         // Implement a retry after a delay (e.g., 60 seconds)\n// //         setTimeout(() => {\n// //           fetchStockData(symbol); // Retry fetching data after 60 seconds\n// //         }, 6000); // Wait 60 seconds before retrying\n// //       } else {\n// //         console.error('Error fetching stock data:', error);\n// //       }\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (symbol) {\n// //       const interval = setInterval(() => {\n// //         fetchStockData(symbol);\n// //       }, 5000); // Fetch every second\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [symbol]);\n\n// //   const priceChart = {\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Stock Price',\n// //         data: priceData.map((entry) => entry.c),\n// //         fill: false,\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\n// //         borderColor: 'rgba(75,192,192,1)',\n// //       },\n// //     ],\n// //   };\n\n// //   const volumeChart = {\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Call Volume',\n// //         data: volumeData.map((entry) => entry.call_volume),\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n// //         borderColor: 'rgba(54, 162, 235, 1)',\n// //         borderWidth: 1,\n// //       },\n// //       {\n// //         label: 'Put Volume',\n// //         data: volumeData.map((entry) => entry.put_volume),\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n// //         borderColor: 'rgba(255, 99, 132, 1)',\n// //         borderWidth: 1,\n// //       },\n// //     ],\n// //   };\n\n// //   return (\n// //     <div>\n// //       <form onSubmit={handleSubmit}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter Stock Symbol\"\n// //           value={symbol}\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n// //         />\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n\n// //       {priceData.length > 0 && (\n// //         <>\n// //           <h2>{symbol} Stock Price</h2>\n// //           <Line data={priceChart} />\n// //         </>\n// //       )}\n\n// //       {volumeData.length > 0 && (\n// //         <>\n// //           <h2>Volume Data</h2>\n// //           <Bar data={volumeChart} />\n// //         </>\n// //       )}\n\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n// //       </button>\n// //     </div>\n// //   );\n// // };\n\n// // export default StockTracker;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { Line, Bar } from 'react-chartjs-2';\n// // import 'chart.js/auto'; // Required for chart.js\n\n// // const StockTracker = () => {\n// //   const [symbol, setSymbol] = useState('');\n// //   const [priceData, setPriceData] = useState([]);\n// //   const [volumeData, setVolumeData] = useState([]);\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n// //     fetchStockData(symbol);\n// //   };\n\n// //   const fetchStockData = async (symbol) => {\n// //     try {\n// //       const now = new Date();\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n// //       const toDate = now.toISOString().split('T')[0];\n\n// //       // Fetch stock price data\n// //       const priceResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-20?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setPriceData(priceResponse.data.results || []);\n\n// //       // Fetch volume data for the closest expiry date\n// //       const volumeResponse = await axios.get(\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setVolumeData(volumeResponse.data.results || []);\n\n// //     //   // Fetch Greeks (Delta, Gamma, Vega) and Strike Prices for options 10 above/below\n// //     //   const strikeResponse = await axios.get(\n// //     //     `https://api.polygon.io/v1/reference/options/greeks/${symbol}?apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //     //   );\n\n// //     //   setStrikeData(strikeResponse.data.results || []);\n\n// //     } catch (error) {\n// //       console.error('Error fetching stock data:', error);\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (symbol) {\n// //       const interval = setInterval(() => {\n// //         fetchStockData(symbol);\n// //       }, 1000); // Fetch every second\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [symbol]);\n\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n// //   const priceChart = {\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Stock Price',\n// //         data: priceData.map((entry) => entry.c),\n// //         fill: false,\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\n// //         borderColor: 'rgba(75,192,192,1)',\n// //       },\n// //     ],\n// //   };\n\n// //   const volumeChart = {\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleDateString()), // Using date for better accuracy\n// //     datasets: [\n// //       {\n// //         label: 'Call Volume',\n// //         data: volumeData.map((entry) => \n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume),\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n// //         borderColor: 'rgba(54, 162, 235, 1)',\n// //         borderWidth: 1,\n// //       },\n// //       {\n// //         label: 'Put Volume',\n// //         data: volumeData.map((entry) => \n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume),\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n// //         borderColor: 'rgba(255, 99, 132, 1)',\n// //         borderWidth: 1,\n// //       },\n// //     ],\n// //   };\n\n// //   // Function to calculate percentage movement using Greeks\n// //   const calculatePriceImpact = (greeks, priceChange) => {\n// //     const delta = greeks.delta || 0;\n// //     const gamma = greeks.gamma || 0;\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\n// //   };\n\n// //   return (\n// //     <div>\n// //       <form onSubmit={handleSubmit}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter Stock Symbol\"\n// //           value={symbol}\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n// //         />\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n\n// //       {priceData.length > 0 && (\n// //         <>\n// //           <h2>{symbol} Stock Price</h2>\n// //           <Line data={priceChart} />\n// //         </>\n// //       )}\n\n// //       {volumeData.length > 0 && (\n// //         <>\n// //           <h2>Volume Data</h2>\n// //           <Bar data={volumeChart} />\n// //         </>\n// //       )}\n\n// //       {strikeData.length > 0 && (\n// //         <>\n// //           <h2>Strike Price Data with Greeks</h2>\n// //           <ul>\n// //             {strikeData.map((strike) => (\n// //               <li key={strike.id}>\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         </>\n// //       )}\n\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n// //       </button>\n// //     </div>\n// //   );\n// // };\n\n// // export default StockTracker;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { Line, Bar } from 'react-chartjs-2';\n// // import 'chart.js/auto'; // Required for chart.js\n\n// // const StockTracker = () => {\n// //   const [symbol, setSymbol] = useState('');\n// //   const [priceData, setPriceData] = useState([]);\n// //   const [volumeData, setVolumeData] = useState([]);\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n// //     fetchStockData(symbol);\n// //   };\n\n// //   const fetchStockData = async (symbol) => {\n// //     try {\n// //       const now = new Date();\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n// //       const toDate = now.toISOString().split('T')[0];\n\n// //       // Fetch stock price data\n// //       const priceResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setPriceData(priceResponse.data.results || []);\n\n// //       // Fetch volume data for the closest expiry date\n// //       const volumeResponse = await axios.get(\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setVolumeData(volumeResponse.data.results || []);\n\n// //     } catch (error) {\n// //       console.error('Error fetching stock data:', error);\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (symbol) {\n// //       const interval = setInterval(() => {\n// //         fetchStockData(symbol);\n// //       }, 1000); // Fetch every second\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [symbol]);\n\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n// //   // Price chart configuration\n// //   const priceChart = {\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Stock Price',\n// //         data: priceData.map((entry) => entry.c),\n// //         fill: false,\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\n// //         borderColor: 'rgba(75,192,192,1)',\n// //       },\n// //     ],\n// //   };\n\n// //   // Volume chart configuration with updated data based on `toggleVolume`\n// //   const volumeChart = {\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Call Volume',\n// //         data: volumeData.map((entry) =>\n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\n// //         ),\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n// //         borderColor: 'rgba(54, 162, 235, 1)',\n// //         borderWidth: 1,\n// //       },\n// //       {\n// //         label: 'Put Volume',\n// //         data: volumeData.map((entry) =>\n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\n// //         ),\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n// //         borderColor: 'rgba(255, 99, 132, 1)',\n// //         borderWidth: 1,\n// //       },\n// //     ],\n// //   };\n\n// //   // Function to calculate percentage movement using Greeks\n// //   const calculatePriceImpact = (greeks, priceChange) => {\n// //     const delta = greeks.delta || 0;\n// //     const gamma = greeks.gamma || 0;\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\n// //   };\n\n// //   return (\n// //     <div>\n// //       <form onSubmit={handleSubmit}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter Stock Symbol\"\n// //           value={symbol}\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n// //         />\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n\n// //       {priceData.length > 0 && (\n// //         <>\n// //           <h2>{symbol} Stock Price</h2>\n// //           <Line data={priceChart} />\n// //         </>\n// //       )}\n\n// //       {volumeData.length > 0 && (\n// //         <>\n// //           <h2>Volume Data</h2>\n// //           <Bar data={volumeChart} />\n// //         </>\n// //       )}\n\n// //       {strikeData.length > 0 && (\n// //         <>\n// //           <h2>Strike Price Data with Greeks</h2>\n// //           <ul>\n// //             {strikeData.map((strike) => (\n// //               <li key={strike.id}>\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         </>\n// //       )}\n\n// //       {/* Toggle Button */}\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n// //       </button>\n// //     </div>\n// //   );\n// // };\n\n// // export default StockTracker;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { Line, Bar } from 'react-chartjs-2';\n// // import 'chart.js/auto'; // Required for chart.js\n\n// // const StockTracker = () => {\n// //   const [symbol, setSymbol] = useState('');\n// //   const [priceData, setPriceData] = useState([]);\n// //   const [volumeData, setVolumeData] = useState([]);\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n// //     fetchStockData(symbol);\n// //   };\n\n// //   const fetchStockData = async (symbol) => {\n// //     try {\n// //       const now = new Date();\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n// //       const toDate = now.toISOString().split('T')[0];\n\n// //       // Fetch stock price data\n// //       const priceResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setPriceData(priceResponse.data.results || []);\n\n// //       // Fetch volume data for the closest expiry date\n// //       const volumeResponse = await axios.get(\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n// //       console.log(volumeResponse.data.results);\n\n// //       setVolumeData(volumeResponse.data.results || []);\n\n// //     } catch (error) {\n// //       console.error('Error fetching stock data:', error);\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (symbol) {\n// //       const interval = setInterval(() => {\n// //         fetchStockData(symbol);\n// //       }, 1000); // Fetch every second\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [symbol]);\n\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n// //   // Price chart configuration\n// //   const priceChart = {\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Stock Price',\n// //         data: priceData.map((entry) => entry.c),\n// //         fill: false,\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\n// //         borderColor: 'rgba(75,192,192,1)',\n// //       },\n// //     ],\n// //   };\n\n// //   // Volume chart configuration with updated data based on `toggleVolume`\n// //   const volumeChart = {\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Call Volume',\n// //         data: volumeData.map((entry) =>\n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\n// //         ),\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\n// //         borderColor: 'rgba(54, 162, 235, 1)',\n// //         borderWidth: 1,\n// //       },\n// //       {\n// //         label: 'Put Volume',\n// //         data: volumeData.map((entry) =>\n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\n// //         ),\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\n// //         borderColor: 'rgba(255, 99, 132, 1)',\n// //         borderWidth: 1,\n// //       },\n// //     ],\n// //   };\n\n// //   // Function to calculate percentage movement using Greeks\n// //   const calculatePriceImpact = (greeks, priceChange) => {\n// //     const delta = greeks.delta || 0;\n// //     const gamma = greeks.gamma || 0;\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\n// //   };\n\n// //   const handleToggleVolume = () => {\n// //     setToggleVolume((prevState) => {\n// //       const newToggleState = !prevState;\n// //       console.log('Toggle Volume Button Clicked: ', newToggleState);\n// //       console.log('Volume Data: ', volumeData);\n// //       console.log('Price Data: ', priceData);\n// //       return newToggleState;\n// //     });\n// //   };\n\n// //   return (\n// //     <div>\n// //       <form onSubmit={handleSubmit}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter Stock Symbol\"\n// //           value={symbol}\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n// //         />\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n\n// //       {/* Display stock price graph */}\n// //       {priceData.length > 0 && (\n// //         <>\n// //           <h2>{symbol} Stock Price</h2>\n// //           <Line data={priceChart} />\n// //         </>\n// //       )}\n\n// //       {/* Display volume/dollar amount graph */}\n// //       {volumeData.length > 0 && (\n// //         <>\n// //           <h2>Volume Data</h2>\n// //           <Bar data={volumeChart} />\n// //         </>\n// //       )}\n\n// //       {/* Display strike data */}\n// //       {strikeData.length > 0 && (\n// //         <>\n// //           <h2>Strike Price Data with Greeks</h2>\n// //           <ul>\n// //             {strikeData.map((strike) => (\n// //               <li key={strike.id}>\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         </>\n// //       )}\n\n// //       {/* Toggle button to switch between volume and dollar amount */}\n// //       <button onClick={handleToggleVolume}>\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\n// //       </button>\n// //     </div>\n// //   );\n// // };\n\n// // export default StockTracker;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { Line, Bar } from 'react-chartjs-2';\n// // import 'chart.js/auto'; // Required for chart.js\n\n// // const StockTracker = () => {\n// //   const [symbol, setSymbol] = useState('');\n// //   const [priceData, setPriceData] = useState([]);\n// //   const [optionData, setOptionData] = useState([]); // For storing option data\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\n\n// //   const handleSubmit = (e) => {\n// //     e.preventDefault();\n// //     fetchStockData(symbol);\n// //   };\n// // //   Right now the marrcket is c\n// // //   const fetchStockData = async (symbol) => {\n// // //     try {\n// // //       const now = new Date();\n// // //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000); // Fetching last 10 minutes of data\n// // //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n// // //       const toDate = now.toISOString().split('T')[0];\n\n// // //       // Fetch stock price data\n// // //       const priceResponse = await axios.get(\n// // //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/${fromDate}/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// // //       );\n\n// // //       setPriceData(priceResponse.data.results || []);\n// // //     } catch (error) {\n// // //       console.error('Error fetching stock data:', error);\n// // //     }\n// // //   };\n\n// //   const fetchStockData = async (symbol) => {\n// //     try {\n// //       const now = new Date();\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\n// //       const toDate = now.toISOString().split('T')[0];\n\n// //       // Fetch stock price data\n// //       const priceResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setPriceData(priceResponse.data.results || []);\n\n// //       // Fetch option data from your provided API URL\n// //       const optionResponse = await axios.get(\n// //         `https://api.polygon.io/v2/aggs/ticker/O:${symbol}251219C00650000/range/1/day/2024-09-10/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\n// //       );\n\n// //       setOptionData(optionResponse.data.results || []); // Store option data\n\n// //     } catch (error) {\n// //       console.error('Error fetching stock or option data:', error);\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (symbol) {\n// //       const interval = setInterval(() => {\n// //         fetchStockData(symbol);\n// //       }, 1000); // Fetch every second\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [symbol]);\n\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\n\n// //   // Price chart configuration\n// //   const priceChart = {\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\n// //     datasets: [\n// //       {\n// //         label: 'Stock Price',\n// //         data: priceData.map((entry) => entry.c),\n// //         fill: false,\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\n// //         borderColor: 'rgba(75,192,192,1)',\n// //       },\n// //     ],\n// //   };\n\n// //   // Function to toggle between showing volume or dollar amount in option chart\n// //   const handleToggleVolume = () => {\n// //     setToggleVolume((prevState) => !prevState);\n// //     console.log('Toggle Volume Button Clicked:', toggleVolume);\n// //   };\n\n// //   return (\n// //     <div>\n// //       <form onSubmit={handleSubmit}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter Stock Symbol\"\n// //           value={symbol}\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n// //         />\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n\n// //       {/* Display stock price graph */}\n// //       {priceData.length > 0 && (\n// //         <>\n// //           <h2>{symbol} Stock Price</h2>\n// //           <Line data={priceChart} />\n// //         </>\n// //       )}\n\n// //     </div>\n// //   );\n// // };\n\n// // export default StockTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n\n// const StockOptionsTracker = () => {\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\n//   const [stockData, setStockData] = useState([]); // Stock price data\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\n\n//   // Fetch stock data and options contracts\n//   useEffect(() => {\n//     const fetchStockDataAndOptions = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         // Fetch stock data for latest price\n//         const stockResponse = await axios.get(\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/prev?adjusted=true&apiKey=${polygonApiKey}`\n//         );\n//         const currentPrice = stockResponse.data.results[0].c;\n//         setStockPrice(currentPrice);\n\n//         // Fetch stock price data for charting\n//         const stockPriceResponse = await axios.get(\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\n//         );\n//         setStockData(stockPriceResponse.data.results || []);\n\n//         // Fetch options contracts for the soonest expiration\n//         const optionsResponse = await axios.get(\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\n//         );\n//         const contracts = optionsResponse.data.results || [];\n//         console.log(\"Contracts\",contracts);\n\n//         // Filter contracts based on strikes around current stock price (±10)\n//         const filteredContracts = contracts.filter(\n//           (contract) =>\n//             contract.expiration_date === '2024-09-27'\n//             // && contract.strike_price >= currentPrice - 5 && \n//             // contract.strike_price <= currentPrice + 5\n//         );\n//         console.log(\"Currunet Price\",currentPrice);\n//         console.log(\"Filtered Contracts\",filteredContracts);\n//         setOptionContracts(filteredContracts);\n\n//         // Fetch cumulative volume data for each contract\n//         const volumes = [];\n//         const timeLabels = [];\n//         for (let i = 0; i < filteredContracts.length; i++) {\n//           const contract = filteredContracts[i];\n//           const volumeResponse = await axios.get(\n//             `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\n//           );\n//           const volumeData = volumeResponse.data.results || [];\n//           console.log(\"Volume Data\",volumeData);\n\n//           // Set time labels once (for X-axis)\n//           if (i === 0 && volumeData.length > 0) {\n//             timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\n//           }\n\n//           // Accumulate the volume for each minute across all contracts\n//           volumeData.forEach((item, index) => {\n//             volumes[index] = (volumes[index] || 0) + item.v;\n//           });\n//         }\n\n//         setCumulativeVolumes(volumes);\n//         setTimeLabels(timeLabels);\n//       } catch (err) {\n//         console.error('Error fetching data:', err);\n//         setError('Failed to load data');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchStockDataAndOptions();\n\n//     const interval = setInterval(() => {\n//       fetchStockDataAndOptions();\n//     }, 60000); // Update every 60 seconds\n\n//     return () => clearInterval(interval);\n//   }, [stockSymbol]);\n\n//   // Helper function to get today’s date\n//   const getTodayDate = () => {\n//     const today = new Date();\n//     return today.toISOString().split('T')[0];\n//   };\n\n//   // Line chart data for stock price\n//   const stockChartData = {\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\n//         borderColor: 'rgba(75,192,192,1)',\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         fill: false,\n//         tension: 0.1,\n//       },\n//     ],\n//   };\n\n//   // Bar chart data for cumulative options volume\n//   const optionsVolumeChartData = {\n//     labels: timeLabels, // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Cumulative Volume',\n//         data: cumulativeVolumes, // Y-axis (volume)\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h2>Stock and Options Tracker</h2>\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <label>\n//           Stock Symbol:\n//           <input\n//             type=\"text\"\n//             value={stockSymbol}\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\n//             style={{ marginLeft: '10px' }}\n//           />\n//         </label>\n//       </div>\n\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\n//       </button>\n\n//       {loading && <p>Loading data...</p>}\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n\n//       <div style={{ marginTop: '30px' }}>\n//         <h3>Stock Price Data for {stockSymbol}</h3>\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\n\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Expiration Date 2024-09-27</h3>\n//         {cumulativeVolumes.length > 0 ? (\n//           <Bar data={optionsVolumeChartData} />\n//         ) : (\n//           <p>No cumulative volume data available</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default StockOptionsTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n\n// const StockOptionsTracker = () => {\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\n//   const [stockData, setStockData] = useState([]); // Stock price data\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\n\n//   // Fetch stock data and options contracts\n//   useEffect(() => {\n//     const fetchStockDataAndOptions = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         // Fetch stock data for latest price\n//         const stockResponse = await axios.get(\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\n//         );\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\n//         setStockPrice(currentPrice);\n\n//         // Fetch stock price data for charting\n//         const stockPriceResponse = await axios.get(\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\n//         );\n//         setStockData(stockPriceResponse.data.results || []);\n\n//         // Fetch options contracts for the soonest expiration\n//         const optionsResponse = await axios.get(\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\n//         );\n//         const contracts = optionsResponse.data.results || [];\n\n//         // Find the soonest expiration date\n//         const soonestExpiryDate = contracts\n//           .map(contract => contract.expiration_date)\n//           .sort()[0];\n\n//         console.log(\"Soonest Expiry Date\",soonestExpiryDate);\n\n//         // Filter contracts based on strikes around current stock price (±10)\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\n\n//     // Find the closest strike price to the current price\n//     const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\n\n//     // Select 10 strikes below and 10 strikes above\n//     const start = Math.max(0, closestContractIndex - 10);\n//     const end = Math.min(sortedContracts.length, closestContractIndex + 10);\n//     const filteredContracts = sortedContracts.slice(start, end);\n\n//     console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\n//     setOptionContracts(filteredContracts);\n\n//         console.log(\"Currunet Price\",currentPrice);\n//         console.log(\"Filtered Contracts\",filteredContracts);\n\n//         // Fetch cumulative volume data for each contract\n//         if (filteredContracts.length > 0) {\n//             const volumes = [];\n//             const timeLabels = [];\n//             for (let i = 0; i < filteredContracts.length; i++) {\n//               const contract = filteredContracts[i];\n//               const volumeResponse = await axios.get(\n//                 `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\n//               );\n//               const volumeData = volumeResponse.data.results || [];\n//               console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\n\n//               // Set time labels once (for X-axis)\n//               if (i === 0 && volumeData.length > 0) {\n//                 timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\n//               }\n\n//               // Accumulate the volume for each minute across all contracts\n//               volumeData.forEach((item, index) => {\n//                 volumes[index] = (volumes[index] || 0) + item.v;\n//               });\n//             }\n\n//             setCumulativeVolumes(volumes);\n//             setTimeLabels(timeLabels);\n//             }  else {\n//                 console.log(\"No contracts found within the 10 above and below strike price range.\");\n//               }\n\n//       } catch (err) {\n//         console.error('Error fetching data:', err);\n//         setError('Failed to load data');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchStockDataAndOptions();\n\n//     const interval = setInterval(() => {\n//       fetchStockDataAndOptions();\n//     }, 60000); // Update every 60 seconds\n\n//     return () => clearInterval(interval);\n//   }, [stockSymbol]);\n\n//   // Helper function to get today’s date\n//   const getTodayDate = () => {\n//     const today = new Date();\n//     return today.toISOString().split('T')[0];\n//   };\n\n//   // Line chart data for stock price\n//   const stockChartData = {\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\n//         borderColor: 'rgba(75,192,192,1)',\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         fill: false,\n//         tension: 0.1,\n//       },\n//     ],\n//   };\n\n//   // Bar chart data for cumulative options volume\n//   const optionsVolumeChartData = {\n//     labels: timeLabels, // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Cumulative Volume',\n//         data: cumulativeVolumes, // Y-axis (volume)\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h2>Stock and Options Tracker</h2>\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <label>\n//           Stock Symbol:\n//           <input\n//             type=\"text\"\n//             value={stockSymbol}\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\n//             style={{ marginLeft: '10px' }}\n//           />\n//         </label>\n//       </div>\n\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\n//       </button>\n\n//       {loading && <p>Loading data...</p>}\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n\n//       <div style={{ marginTop: '30px' }}>\n//         <h3>Stock Price Data for {stockSymbol}</h3>\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\n\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\n//         {cumulativeVolumes.length > 0 ? (\n//           <Bar data={optionsVolumeChartData} />\n//         ) : (\n//           <p>No cumulative volume data available</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default StockOptionsTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n\n// const StockOptionsTracker = () => {\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\n//   const [stockData, setStockData] = useState([]); // Stock price data\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\n\n//   // Fetch stock data and options contracts\n//   useEffect(() => {\n//     const fetchStockDataAndOptions = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         // Fetch stock data for latest price\n//         const stockResponse = await axios.get(\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\n//         );\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\n//         setStockPrice(currentPrice);\n\n//         // Fetch stock price data for charting\n//         const stockPriceResponse = await axios.get(\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\n//         );\n//         setStockData(stockPriceResponse.data.results || []);\n\n//         // Fetch options contracts for the soonest expiration\n//         const optionsResponse = await axios.get(\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\n//         );\n//         const contracts = optionsResponse.data.results || [];\n\n//         // Find the soonest expiration date\n//         const soonestExpiryDate = contracts\n//           .map(contract => contract.expiration_date)\n//           .sort()[0];\n\n//         console.log(\"Soonest Expiry Date\", soonestExpiryDate);\n\n//         // Filter contracts based on strikes around current stock price (±10)\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\n\n//         // Find the closest strike price to the current price\n//         const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\n\n//         // Select 10 strikes below and 10 strikes above\n//         const start = Math.max(0, closestContractIndex - 10);\n//         const end = Math.min(sortedContracts.length, closestContractIndex + 10);\n//         const filteredContracts = sortedContracts.slice(start, end);\n\n//         console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\n//         setOptionContracts(filteredContracts);\n\n//         console.log(\"Current Price\", currentPrice);\n//         console.log(\"Filtered Contracts\", filteredContracts);\n\n//         // Fetch cumulative volume data for each contract\n//         if (filteredContracts.length > 0) {\n//           const volumes = [];\n//           const timeLabels = [];\n//           for (let i = 0; i < filteredContracts.length; i++) {\n//             const contract = filteredContracts[i];\n//             const volumeResponse = await axios.get(\n//               `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\n//             );\n//             const volumeData = volumeResponse.data.results || [];\n//             console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\n\n//             // Set time labels once (for X-axis)\n//             if (i === 0 && volumeData.length > 0) {\n//               timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\n//             }\n\n//             // Accumulate the volume for each minute across all contracts\n//             volumeData.forEach((item, index) => {\n//               volumes[index] = (volumes[index] || 0) + item.v;\n//             });\n//           }\n\n//           setCumulativeVolumes(volumes);\n//           setTimeLabels(timeLabels);\n//         } else {\n//           console.log(\"No contracts found within the 10 above and below strike price range.\");\n//         }\n\n//       } catch (err) {\n//         console.error('Error fetching data:', err);\n//         setError('Failed to load data');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchStockDataAndOptions();\n\n//     const interval = setInterval(() => {\n//       fetchStockDataAndOptions();\n//     }, 60000); // Update every 60 seconds\n\n//     return () => clearInterval(interval);\n//   }, [stockSymbol]);\n\n//   // Helper function to get today’s date\n//   const getTodayDate = () => {\n//     const today = new Date();\n//     return today.toISOString().split('T')[0];\n//   };\n\n//   // Line chart data for stock price\n//   const stockChartData = {\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\n//         borderColor: 'rgba(75,192,192,1)',\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         fill: false,\n//         tension: 0.1,\n//       },\n//     ],\n//   };\n\n//   // Bar chart data for cumulative options volume\n//   const optionsVolumeChartData = {\n//     labels: timeLabels, // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Cumulative Volume',\n//         data: cumulativeVolumes, // Y-axis (volume)\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h2>Stock and Options Tracker</h2>\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <label>\n//           Stock Symbol:\n//           <input\n//             type=\"text\"\n//             value={stockSymbol}\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\n//             style={{ marginLeft: '10px' }}\n//           />\n//         </label>\n//       </div>\n\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\n//       </button>\n\n//       {loading && <p>Loading data...</p>}\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n\n//       <div style={{ marginTop: '30px' }}>\n//         <h3>Stock Price Data for {stockSymbol}</h3>\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\n\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\n//         {cumulativeVolumes.length > 0 ? (\n//           <Bar data={optionsVolumeChartData} />\n//         ) : (\n//           <p>No cumulative volume data available</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default StockOptionsTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n\n// // Black-Scholes Greeks calculations\n// const blackScholesGreeks = (S, K, T, r, sigma, optionType) => {\n//     const d1 = (Math.log(S / K) + (r + (sigma ** 2) / 2) * T) / (sigma * Math.sqrt(T));\n//     const d2 = d1 - sigma * Math.sqrt(T);\n//     const phi = (x) => (1 / Math.sqrt(2 * Math.PI)) * Math.exp(-0.5 * x ** 2);\n\n//     const delta = optionType === 'call' ? phi(d1) : phi(d1) - 1;\n//     return { delta };\n//   };\n\n// const StockOptionsTracker = () => {\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\n//   const [stockData, setStockData] = useState([]); // Stock price data\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\n\n//   // Fetch stock data and options contracts\n//   useEffect(() => {\n//     const fetchStockDataAndOptions = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         // Fetch stock data for latest price\n//         const stockResponse = await axios.get(\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\n//         );\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\n//         setStockPrice(currentPrice);\n\n//         // Fetch stock price data for charting\n//         const stockPriceResponse = await axios.get(\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\n//         );\n//         setStockData(stockPriceResponse.data.results || []);\n\n//         // Fetch options contracts for the soonest expiration\n//         const optionsResponse = await axios.get(\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\n//         );\n//         const contracts = optionsResponse.data.results || [];\n\n//         // Find the soonest expiration date\n//         const soonestExpiryDate = contracts\n//           .map(contract => contract.expiration_date)\n//           .sort()[0];\n\n//         console.log(\"Soonest Expiry Date\", soonestExpiryDate);\n\n//         // Filter contracts based on strikes around current stock price (±10)\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\n\n//         // Find the closest strike price to the current price\n//         const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\n\n//         // Select 10 strikes below and 10 strikes above\n//         const start = Math.max(0, closestContractIndex - 10);\n//         const end = Math.min(sortedContracts.length, closestContractIndex + 10);\n//         const filteredContracts = sortedContracts.slice(start, end);\n\n//         console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\n//         setOptionContracts(filteredContracts);\n\n//         console.log(\"Current Price\", currentPrice);\n//         console.log(\"Filtered Contracts\", filteredContracts);\n\n//         // Fetch cumulative volume data for each contract\n//         if (filteredContracts.length > 0) {\n//           const volumes = [];\n//           const timeLabels = [];\n//           for (let i = 0; i < filteredContracts.length; i++) {\n//             const contract = filteredContracts[i];\n//             const volumeResponse = await axios.get(\n//               `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\n//             );\n//             const volumeData = volumeResponse.data.results || [];\n//             console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\n\n//             // Set time labels once (for X-axis)\n//             if (i === 0 && volumeData.length > 0) {\n//               timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\n//             }\n\n//             // Accumulate the volume for each minute across all contracts\n//             volumeData.forEach((item, index) => {\n//               volumes[index] = (volumes[index] || 0) + item.v;\n//             });\n//           }\n\n//           setCumulativeVolumes(volumes);\n//           setTimeLabels(timeLabels);\n//         } else {\n//           console.log(\"No contracts found within the 10 above and below strike price range.\");\n//         }\n\n//       } catch (err) {\n//         console.error('Error fetching data:', err);\n//         setError('Failed to load data');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchStockDataAndOptions();\n\n//     const interval = setInterval(() => {\n//       fetchStockDataAndOptions();\n//     }, 60000); // Update every 60 seconds\n\n//     return () => clearInterval(interval);\n//   }, [stockSymbol]);\n\n//   // Helper function to get today’s date\n//   const getTodayDate = () => {\n//     const today = new Date();\n//     return today.toISOString().split('T')[0];\n//   };\n\n//   // Line chart data for stock price\n//   const stockChartData = {\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\n//         borderColor: 'rgba(75,192,192,1)',\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         fill: false,\n//         tension: 0.1,\n//       },\n//     ],\n//   };\n\n//   // Bar chart data for cumulative options volume\n//   const optionsVolumeChartData = {\n//     labels: timeLabels, // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Cumulative Volume',\n//         data: cumulativeVolumes, // Y-axis (volume)\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h2>Stock and Options Tracker</h2>\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <label>\n//           Stock Symbol:\n//           <input\n//             type=\"text\"\n//             value={stockSymbol}\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\n//             style={{ marginLeft: '10px' }}\n//           />\n//         </label>\n//       </div>\n\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\n//       </button>\n\n//       {loading && <p>Loading data...</p>}\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n\n//       <div style={{ marginTop: '30px' }}>\n//         <h3>Stock Price Data for {stockSymbol}</h3>\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\n\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\n//         {cumulativeVolumes.length > 0 ? (\n//           <Bar data={optionsVolumeChartData} />\n//         ) : (\n//           <p>No cumulative volume data available</p>\n//         )}\n\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default StockOptionsTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n\n// // Black-Scholes Greeks calculations\n// const blackScholesGreeks = (S, K, T, r, sigma, optionType) => {\n//   const d1 = (Math.log(S / K) + (r + (sigma ** 2) / 2) * T) / (sigma * Math.sqrt(T));\n//   const d2 = d1 - sigma * Math.sqrt(T);\n//   const phi = (x) => (1 / Math.sqrt(2 * Math.PI)) * Math.exp(-0.5 * x ** 2);\n\n//   const delta = optionType === 'call' ? phi(d1) : phi(d1) - 1;\n//   return { delta };\n// };\n\n// const StockOptionsTracker = () => {\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\n//   const [stockData, setStockData] = useState([]); // Stock price data\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\n\n//   // Fetch stock data and options contracts\n//   useEffect(() => {\n//     const fetchStockDataAndOptions = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         // Fetch stock data for latest price\n//         const stockResponse = await axios.get(\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\n//         );\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\n//         setStockPrice(currentPrice);\n\n//         // Fetch stock price data for charting\n//         const stockPriceResponse = await axios.get(\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\n//         );\n//         setStockData(stockPriceResponse.data.results || []);\n\n//         // Fetch options contracts for the soonest expiration\n//         const optionsResponse = await axios.get(\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\n//         );\n//         const contracts = optionsResponse.data.results || [];\n\n//         // Find the soonest expiration date\n//         const soonestExpiryDate = contracts\n//           .map(contract => contract.expiration_date)\n//           .sort()[0];\n\n//         console.log(\"Soonest Expiry Date\", soonestExpiryDate);\n\n//         // Filter contracts based on strikes around current stock price (±10)\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\n\n//         // Find the closest strike price to the current price\n//         const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\n\n//         // Select 10 strikes below and 10 strikes above\n//         const start = Math.max(0, closestContractIndex - 10);\n//         const end = Math.min(sortedContracts.length, closestContractIndex + 10);\n//         const filteredContracts = sortedContracts.slice(start, end);\n\n//         console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\n//         setOptionContracts(filteredContracts);\n\n//         console.log(\"Current Price\", currentPrice);\n//         console.log(\"Filtered Contracts\", filteredContracts);\n\n//         // Fetch cumulative volume data for each contract\n//         if (filteredContracts.length > 0) {\n//           const volumes = [];\n//           const timeLabels = [];\n//           for (let i = 0; i < filteredContracts.length; i++) {\n//             const contract = filteredContracts[i];\n//             const volumeResponse = await axios.get(\n//               `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\n//             );\n//             const volumeData = volumeResponse.data.results || [];\n//             console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\n\n//             // Set time labels once (for X-axis)\n//             if (i === 0 && volumeData.length > 0) {\n//               timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\n//             }\n\n//             // Accumulate the volume for each minute across all contracts\n//             volumeData.forEach((item, index) => {\n//               volumes[index] = (volumes[index] || 0) + item.v;\n//             });\n//           }\n\n//           setCumulativeVolumes(volumes);\n//           setTimeLabels(timeLabels);\n//         } else {\n//           console.log(\"No contracts found within the 10 above and below strike price range.\");\n//         }\n\n//       } catch (err) {\n//         console.error('Error fetching data:', err);\n//         setError('Failed to load data');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchStockDataAndOptions();\n\n//     const interval = setInterval(() => {\n//       fetchStockDataAndOptions();\n//     }, 60000); // Update every 60 seconds\n\n//     return () => clearInterval(interval);\n//   }, [stockSymbol]);\n\n//   // Helper function to get today’s date\n//   const getTodayDate = () => {\n//     const today = new Date();\n//     return today.toISOString().split('T')[0];\n//   };\n\n//   // Line chart data for stock price\n//   const stockChartData = {\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\n//         borderColor: 'rgba(75,192,192,1)',\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         fill: false,\n//         tension: 0.1,\n//       },\n//     ],\n//   };\n\n//   // Bar chart data for cumulative options volume\n//   const optionsVolumeChartData = {\n//     labels: timeLabels, // X-axis (time)\n//     datasets: [\n//       {\n//         label: isDollarMode ? 'Cumulative Dollar Amount' : 'Cumulative Volume',\n//         data: cumulativeVolumes.map((volume, index) =>\n//           isDollarMode ? volume * 100 * stockPrice : volume\n//         ), // Convert to dollar amount if isDollarMode is true\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h2>Stock and Options Tracker</h2>\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <label>\n//           Stock Symbol:\n//           <input\n//             type=\"text\"\n//             value={stockSymbol}\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\n//             style={{ marginLeft: '10px' }}\n//           />\n//         </label>\n//       </div>\n\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\n//       </button>\n\n//       {loading && <p>Loading data...</p>}\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n\n//       <div style={{ marginTop: '30px' }}>\n//         <h3>Stock Price Data for {stockSymbol}</h3>\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\n\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\n//         {cumulativeVolumes.length > 0 ? (\n//           <Bar data={optionsVolumeChartData} />\n//         ) : (\n//           <p>No cumulative volume data available</p>\n//         )}\n\n//         <h3 style={{ marginTop: '40px' }}>Option Chain with 1% Move Estimation</h3>\n//         {optionContracts.length > 0 ? (\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Strike</th>\n//                 <th>Call LTP</th>\n//                 <th>Put LTP</th>\n//                 <th>IV</th>\n//                 <th>1% Up Estimation</th>\n//                 <th>1% Down Estimation</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {optionContracts.map((contract, index) => {\n//                 const T = (new Date(contract.expiration_date).getTime() - new Date().getTime()) / (365 * 24 * 60 * 60 * 1000); // Time to expiration in years\n//                 const greeks = blackScholesGreeks(\n//                   stockPrice,\n//                   parseFloat(contract.strike_price),\n//                   T,\n//                   0.05, // Assuming 5% risk-free rate\n//                   parseFloat(contract.implied_volatility) / 100,\n//                   'call'\n//                 );\n//                 const delta = greeks.delta;\n//                 const moveUp = stockPrice * 1.01;\n//                 const moveDown = stockPrice * 0.99;\n\n//                 return (\n//                   <tr key={index}>\n//                     <td>{contract.strike_price}</td>\n//                     <td>{contract.call_last_traded_price}</td>\n//                     <td>{contract.put_last_traded_price}</td>\n//                     <td>{contract.implied_volatility}%</td>\n//                     <td>{moveUp.toFixed(2)}</td>\n//                     <td>{moveDown.toFixed(2)}</td>\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n//         ) : (\n//           <p>No option contracts available</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default StockOptionsTracker;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n\n// // Black-Scholes Greeks calculations\n// const blackScholesGreeks = (S, K, T, r, sigma, optionType) => {\n//     const d1 = (Math.log(S / K) + (r + (sigma ** 2) / 2) * T) / (sigma * Math.sqrt(T));\n//     const d2 = d1 - sigma * Math.sqrt(T);\n//     const phi = (x) => (1 / Math.sqrt(2 * Math.PI)) * Math.exp(-0.5 * x ** 2);\n\n//     // Greeks calculations\n//     const delta = optionType === 'call' ? phi(d1) : phi(d1) - 1;\n//     const vega = S * Math.sqrt(T) * phi(d1); // Vega represents the sensitivity to volatility\n//     const gamma = phi(d1) / (S * sigma * Math.sqrt(T)); // Gamma for sensitivity to delta changes\n\n//     return { delta, gamma, vega };\n//   };\n\n// const StockOptionsTracker = () => {\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\n//   const [stockData, setStockData] = useState([]); // Stock price data\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\n\n//   // Fetch stock data and options contracts\n//   useEffect(() => {\n//     const fetchStockDataAndOptions = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         // Fetch stock data for latest price\n//         const stockResponse = await axios.get(\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\n//         );\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\n//         setStockPrice(currentPrice);\n\n//         // Fetch stock price data for charting\n//         const stockPriceResponse = await axios.get(\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-20/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\n//         );\n//         setStockData(stockPriceResponse.data.results || []);\n\n//         // Fetch options contracts for the soonest expiration\n//         const optionsResponse = await axios.get(\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\n//         );\n//         const contracts = optionsResponse.data.results || [];\n\n//         // Find the soonest expiration date\n//         const soonestExpiryDate = contracts\n//           .map(contract => contract.expiration_date)\n//           .sort()[0];\n\n//         // Filter contracts based on strikes around current stock price (±10)\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\n\n//         // Find the closest strike price to the current price\n//         const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\n\n//         // Select 10 strikes below and 10 strikes above\n//         const start = Math.max(0, closestContractIndex - 10);\n//         const end = Math.min(sortedContracts.length, closestContractIndex + 10);\n//         const filteredContracts = sortedContracts.slice(start, end);\n\n//         setOptionContracts(filteredContracts);\n\n//         // Fetch cumulative volume data for each contract\n//         if (filteredContracts.length > 0) {\n//             const volumes = [];\n//             let timeLabels = [];\n\n//             try {\n//               // Create an array of promises to fetch the volume data for all contracts concurrently\n//               const volumePromises = filteredContracts.map(async (contract, index) => {\n//                 const volumeResponse = await axios.get(\n//                   `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\n//                 );\n\n//                 const volumeData = volumeResponse.data.results || [];\n\n//                 // Set time labels only for the first contract's volume data\n//                 if (index === 0 && volumeData.length > 0) {\n//                   timeLabels = volumeData.map(item => new Date(item.t).toLocaleTimeString());\n//                 }\n\n//                 // Return the volume data for further processing\n//                 return volumeData;\n//               });\n\n//               // Wait for all the promises to resolve concurrently\n//               const resolvedVolumes = await Promise.all(volumePromises);\n\n//               // Process the resolved volume data and accumulate volumes per minute\n//               resolvedVolumes.forEach(volumeData => {\n//                 volumeData.forEach((item, index) => {\n//                   volumes[index] = (volumes[index] || 0) + item.v;\n//                 });\n//               });\n\n//               // Update the state with accumulated volumes and time labels\n//               setCumulativeVolumes(volumes);\n//               setTimeLabels(timeLabels);\n\n//             } catch (error) {\n//               console.error('Error fetching cumulative volume data:', error);\n//             }\n//           }\n\n//       } catch (err) {\n//         console.error('Error fetching data:', err);\n//         setError('Failed to load data');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchStockDataAndOptions();\n\n//     const interval = setInterval(() => {\n//       fetchStockDataAndOptions();\n//     }, 60000); // Update every 60 seconds\n\n//     return () => clearInterval(interval);\n//   }, [stockSymbol]);\n\n//   // Helper function to get today’s date\n//   const getTodayDate = () => {\n//     const today = new Date();\n//     return today.toISOString().split('T')[0];\n//   };\n\n//   // Line chart data for stock price\n//   const stockChartData = {\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\n//     datasets: [\n//       {\n//         label: 'Stock Price',\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\n//         borderColor: 'rgba(75,192,192,1)',\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         fill: false,\n//         tension: 0.1,\n//       },\n//     ],\n//   };\n\n//   // Bar chart data for cumulative options volume\n//   const optionsVolumeChartData = {\n//     labels: timeLabels, // X-axis (time)\n//     datasets: [\n//       {\n//         label: isDollarMode ? 'Cumulative Dollar Amount' : 'Cumulative Volume',\n//         data: cumulativeVolumes.map((volume, index) =>\n//           isDollarMode ? volume * 100 * stockPrice : volume\n//         ), // Convert to dollar amount if isDollarMode is true\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h2>Stock and Options Tracker</h2>\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <label>\n//           Stock Symbol:\n//           <input\n//             type=\"text\"\n//             value={stockSymbol}\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\n//             style={{ marginLeft: '10px' }}\n//           />\n//         </label>\n//       </div>\n\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\n//       </button>\n\n//       {loading && <p>Loading data...</p>}\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n\n//       <div style={{ marginTop: '30px' }}>\n//         <h3>Stock Price Data for {stockSymbol}</h3>\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\n\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\n//         {cumulativeVolumes.length > 0 ? (\n//           <Bar data={optionsVolumeChartData} />\n//         ) : (\n//           <p>No cumulative volume data available</p>\n//         )}\n\n//         <h3 style={{ marginTop: '40px' }}>Option Chain with 1% Move Estimation</h3>\n//         {optionContracts.length > 0 ? (\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Strike</th>\n//                 <th>IV</th>\n//                 <th>1% Up Estimation</th>\n//                 <th>1% Down Estimation</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {optionContracts.map((contract, index) => {\n//                 const T = (new Date(contract.expiration_date).getTime() - new Date().getTime()) / (365 * 24 * 60 * 60 * 1000); // Time to expiration in years\n//                 const greeks = blackScholesGreeks(\n//                   stockPrice,\n//                   parseFloat(contract.strike_price),\n//                   T,\n//                   0.05, // Assuming 5% risk-free rate\n//                   contract.iv / 100,\n//                   contract.option_type\n//                 );\n\n//                 return (\n//                   <tr key={index}>\n//                     <td>{contract.strike_price}</td>\n//                     <td>{contract.iv}</td>\n//                     <td>{(greeks.delta * 1.01).toFixed(2)}</td>\n//                     <td>{(greeks.delta * 0.99).toFixed(2)}</td>\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n//         ) : (\n//           <p>No options contracts data available</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default StockOptionsTracker;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line, Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockOptionsTracker = () => {\n  _s();\n  const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\n  const [stockPrice, setStockPrice] = useState(0); // Latest stock price\n  const [stockData, setStockData] = useState([]); // Stock price data\n  const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\n  const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\n  const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\n  const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [strikeData, setStrikeData] = useState([]); // New: Strike data with volume, Greeks\n  const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\n\n  // Fetch stock data and options contracts (This section is unchanged)\n  useEffect(() => {\n    const fetchStockDataAndOptions = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const stockResponse = await axios.get(`https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`);\n        const currentPrice = stockResponse.data.ticker.lastTrade.p;\n        setStockPrice(currentPrice);\n        const stockPriceResponse = await axios.get(`https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-20/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`);\n        setStockData(stockPriceResponse.data.results || []);\n        const optionsResponse = await axios.get(`https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`);\n        const contracts = optionsResponse.data.results || [];\n        const soonestExpiryDate = contracts.map(contract => contract.expiration_date).sort()[0];\n        const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\n        const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\n        const start = Math.max(0, closestContractIndex - 10);\n        const end = Math.min(sortedContracts.length, closestContractIndex + 10);\n        const filteredContracts = sortedContracts.slice(start, end);\n        setOptionContracts(filteredContracts);\n        if (filteredContracts.length > 0) {\n          const volumes = [];\n          let timeLabels = [];\n          try {\n            const volumePromises = filteredContracts.map(async (contract, index) => {\n              const volumeResponse = await axios.get(`https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`);\n              const volumeData = volumeResponse.data.results || [];\n              if (index === 0 && volumeData.length > 0) {\n                timeLabels = volumeData.map(item => new Date(item.t).toLocaleTimeString());\n              }\n              return volumeData;\n            });\n            const resolvedVolumes = await Promise.all(volumePromises);\n            resolvedVolumes.forEach(volumeData => {\n              volumeData.forEach((item, index) => {\n                volumes[index] = (volumes[index] || 0) + item.v;\n              });\n            });\n            setCumulativeVolumes(volumes);\n            setTimeLabels(timeLabels);\n          } catch (error) {\n            console.error('Error fetching cumulative volume data:', error);\n          }\n        }\n\n        // New: Fetching Greeks and Volume for Strike Prices (Call and Put) for nearest expiry\n        const strikeResponse = await axios.get(`https://api.polygon.io/v3/snapshot/options/${stockSymbol}?apiKey=${polygonApiKey}`);\n        console.log(\"Strike Response\", strikeResponse.data);\n        const strikeContracts = strikeResponse.data.results || [];\n        console.log(\"Strike Contracts\", strikeContracts);\n        console.log(\"Soonest Expiry Date\", soonestExpiryDate);\n        // Filter for the nearest expiry and prepare for chart\n        const processedStrikeData = strikeContracts.filter(contract => contract.expiration_date === soonestExpiryDate).map(contract => ({\n          strikePrice: contract.strike_price,\n          callVolume: contract.greeks.call_volume,\n          putVolume: contract.greeks.put_volume,\n          delta: contract.greeks.delta\n        }));\n        console.log(\"Processed Strike Data\", processedStrikeData);\n        setStrikeData(processedStrikeData);\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError('Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchStockDataAndOptions();\n    const interval = setInterval(() => {\n      fetchStockDataAndOptions();\n    }, 60000);\n    return () => clearInterval(interval);\n  }, [stockSymbol]);\n\n  // Helper function to get today’s date\n  const getTodayDate = () => {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  };\n\n  // Line chart data for stock price (This section is unchanged)\n  const stockChartData = {\n    labels: stockData.map(item => new Date(item.t).toLocaleTimeString()),\n    datasets: [{\n      label: 'Stock Price',\n      data: stockData.map(item => item.c),\n      borderColor: 'rgba(75,192,192,1)',\n      backgroundColor: 'rgba(75,192,192,0.2)',\n      fill: false,\n      tension: 0.1\n    }]\n  };\n\n  // Bar chart data for cumulative options volume (This section is unchanged)\n  const optionsVolumeChartData = {\n    labels: timeLabels,\n    datasets: [{\n      label: isDollarMode ? 'Cumulative Dollar Amount' : 'Cumulative Volume',\n      data: cumulativeVolumes.map((volume, index) => isDollarMode ? volume * 100 * stockPrice : volume),\n      backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 1\n    }]\n  };\n\n  // New: Bar chart data for strike price call/put volumes\n  const strikeVolumeChartData = {\n    labels: strikeData.map(item => item.strikePrice),\n    datasets: [{\n      label: 'Call Volume',\n      data: strikeData.map(item => item.callVolume),\n      backgroundColor: 'rgba(75, 192, 192, 0.6)'\n    }, {\n      label: 'Put Volume',\n      data: strikeData.map(item => item.putVolume),\n      backgroundColor: 'rgba(255, 99, 132, 0.6)'\n    }]\n  };\n\n  // New: Table to show % price change prediction using Delta\n  const deltaChangeTable = strikeData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: item.strikePrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: [(item.delta * 0.01).toFixed(2), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2159,\n      columnNumber: 7\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2157,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Stock and Options Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Stock Symbol:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: stockSymbol,\n          onChange: e => setStockSymbol(e.target.value.toUpperCase()),\n          style: {\n            marginLeft: '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2168,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsDollarMode(!isDollarMode),\n      children: isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2179,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2183,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2184,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Stock Price Data for \", stockSymbol]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2187,\n        columnNumber: 9\n      }, this), stockData.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n        data: stockChartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2188,\n        columnNumber: 33\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No stock data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2188,\n        columnNumber: 66\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: '40px'\n        },\n        children: \"Options Cumulative Volume for Nearest Expiry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2190,\n        columnNumber: 9\n      }, this), cumulativeVolumes.length > 0 ? /*#__PURE__*/_jsxDEV(Bar, {\n        data: optionsVolumeChartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2192,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No cumulative volume data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2194,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: '40px'\n        },\n        children: \"Strike Price Volumes (Puts and Calls)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2198,\n        columnNumber: 9\n      }, this), strikeData.length > 0 ? /*#__PURE__*/_jsxDEV(Bar, {\n        data: strikeVolumeChartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2200,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No strike volume data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: '40px'\n        },\n        children: \"Price Change Predictions (Based on 1% Stock Price Movement)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Strike Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"% Change (1% Stock Move)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2211,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2209,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: deltaChangeTable\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2164,\n    columnNumber: 5\n  }, this);\n};\n_s(StockOptionsTracker, \"YUgLlv38zDy0AMUNOiWgXHc/6B4=\");\n_c = StockOptionsTracker;\nexport default StockOptionsTracker;\nvar _c;\n$RefreshReg$(_c, \"StockOptionsTracker\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","Bar","jsxDEV","_jsxDEV","StockOptionsTracker","_s","stockSymbol","setStockSymbol","stockPrice","setStockPrice","stockData","setStockData","optionContracts","setOptionContracts","cumulativeVolumes","setCumulativeVolumes","timeLabels","setTimeLabels","isDollarMode","setIsDollarMode","loading","setLoading","error","setError","strikeData","setStrikeData","polygonApiKey","fetchStockDataAndOptions","stockResponse","get","currentPrice","data","ticker","lastTrade","p","stockPriceResponse","getTodayDate","results","optionsResponse","contracts","soonestExpiryDate","map","contract","expiration_date","sort","sortedContracts","a","b","parseFloat","strike_price","closestContractIndex","findIndex","start","Math","max","end","min","length","filteredContracts","slice","volumes","volumePromises","index","volumeResponse","volumeData","item","Date","t","toLocaleTimeString","resolvedVolumes","Promise","all","forEach","v","console","strikeResponse","log","strikeContracts","processedStrikeData","filter","strikePrice","callVolume","greeks","call_volume","putVolume","put_volume","delta","err","interval","setInterval","clearInterval","today","toISOString","split","stockChartData","labels","datasets","label","c","borderColor","backgroundColor","fill","tension","optionsVolumeChartData","volume","borderWidth","strikeVolumeChartData","deltaChangeTable","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","style","padding","marginBottom","type","value","onChange","e","target","toUpperCase","marginLeft","onClick","color","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/polygon_without_ws/stock-tracker/src/components/StockTracker.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { Line, Bar } from 'react-chartjs-2';\r\n// // import 'chart.js/auto'; // Required for chart.js\r\n\r\n// // const StockTracker = () => {\r\n// //   const [symbol, setSymbol] = useState('');\r\n// //   const [priceData, setPriceData] = useState([]);\r\n// //   const [volumeData, setVolumeData] = useState([]);\r\n// //   const [contractData, setContractData] = useState([]);\r\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and dollar amount\r\n\r\n// //   const handleSubmit = (e) => {\r\n// //     e.preventDefault();\r\n// //     fetchStockData(symbol);\r\n// //   };\r\n\r\n// //   const fetchStockData = async (symbol) => {\r\n// //     try {\r\n// //       const now = new Date();\r\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n      \r\n// //       // Convert to YYYY-MM-DD format as required by Polygon API\r\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0]; \r\n// //       const toDate = now.toISOString().split('T')[0]; \r\n  \r\n// //       // Fetch stock price data\r\n// //       const priceResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-22?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n      \r\n// //       console.log(\"Price Response\",priceResponse.data.results);\r\n// //       setPriceData(priceResponse.data.results || []); // Update your price data state\r\n  \r\n// //       // Fetch volume data for the closest expiry date\r\n// //       const volumeResponse = await axios.get(\r\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n// //       console.log(volumeResponse.data.results);\r\n  \r\n// //       setVolumeData(volumeResponse.data.results || []); // Update your volume data state\r\n// //     } catch (error) {\r\n// //       if (error.response && error.response.status === 429) {\r\n// //         // Handle rate limiting (Too Many Requests)\r\n// //         console.error(\"Rate limit exceeded. Please wait or upgrade your subscription.\");\r\n        \r\n// //         // Implement a retry after a delay (e.g., 60 seconds)\r\n// //         setTimeout(() => {\r\n// //           fetchStockData(symbol); // Retry fetching data after 60 seconds\r\n// //         }, 6000); // Wait 60 seconds before retrying\r\n// //       } else {\r\n// //         console.error('Error fetching stock data:', error);\r\n// //       }\r\n// //     }\r\n// //   };\r\n  \r\n\r\n// //   useEffect(() => {\r\n// //     if (symbol) {\r\n// //       const interval = setInterval(() => {\r\n// //         fetchStockData(symbol);\r\n// //       }, 5000); // Fetch every second\r\n// //       return () => clearInterval(interval);\r\n// //     }\r\n// //   }, [symbol]);\r\n\r\n// //   const priceChart = {\r\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Stock Price',\r\n// //         data: priceData.map((entry) => entry.c),\r\n// //         fill: false,\r\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n// //         borderColor: 'rgba(75,192,192,1)',\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   const volumeChart = {\r\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Call Volume',\r\n// //         data: volumeData.map((entry) => entry.call_volume),\r\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n// //         borderColor: 'rgba(54, 162, 235, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //       {\r\n// //         label: 'Put Volume',\r\n// //         data: volumeData.map((entry) => entry.put_volume),\r\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n// //         borderColor: 'rgba(255, 99, 132, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <form onSubmit={handleSubmit}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           placeholder=\"Enter Stock Symbol\"\r\n// //           value={symbol}\r\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n// //         />\r\n// //         <button type=\"submit\">Submit</button>\r\n// //       </form>\r\n\r\n// //       {priceData.length > 0 && (\r\n// //         <>\r\n// //           <h2>{symbol} Stock Price</h2>\r\n// //           <Line data={priceChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {volumeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Volume Data</h2>\r\n// //           <Bar data={volumeChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\r\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n// //       </button>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default StockTracker;\r\n\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { Line, Bar } from 'react-chartjs-2';\r\n// // import 'chart.js/auto'; // Required for chart.js\r\n\r\n// // const StockTracker = () => {\r\n// //   const [symbol, setSymbol] = useState('');\r\n// //   const [priceData, setPriceData] = useState([]);\r\n// //   const [volumeData, setVolumeData] = useState([]);\r\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\r\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n// //   const handleSubmit = (e) => {\r\n// //     e.preventDefault();\r\n// //     fetchStockData(symbol);\r\n// //   };\r\n\r\n// //   const fetchStockData = async (symbol) => {\r\n// //     try {\r\n// //       const now = new Date();\r\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n// //       const toDate = now.toISOString().split('T')[0];\r\n  \r\n// //       // Fetch stock price data\r\n// //       const priceResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/2024-09-20?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n      \r\n// //       setPriceData(priceResponse.data.results || []);\r\n  \r\n// //       // Fetch volume data for the closest expiry date\r\n// //       const volumeResponse = await axios.get(\r\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n  \r\n// //       setVolumeData(volumeResponse.data.results || []);\r\n\r\n// //     //   // Fetch Greeks (Delta, Gamma, Vega) and Strike Prices for options 10 above/below\r\n// //     //   const strikeResponse = await axios.get(\r\n// //     //     `https://api.polygon.io/v1/reference/options/greeks/${symbol}?apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //     //   );\r\n  \r\n// //     //   setStrikeData(strikeResponse.data.results || []);\r\n      \r\n// //     } catch (error) {\r\n// //       console.error('Error fetching stock data:', error);\r\n// //     }\r\n// //   };\r\n  \r\n// //   useEffect(() => {\r\n// //     if (symbol) {\r\n// //       const interval = setInterval(() => {\r\n// //         fetchStockData(symbol);\r\n// //       }, 1000); // Fetch every second\r\n// //       return () => clearInterval(interval);\r\n// //     }\r\n// //   }, [symbol]);\r\n\r\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\r\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n// //   const priceChart = {\r\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Stock Price',\r\n// //         data: priceData.map((entry) => entry.c),\r\n// //         fill: false,\r\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n// //         borderColor: 'rgba(75,192,192,1)',\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   const volumeChart = {\r\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleDateString()), // Using date for better accuracy\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Call Volume',\r\n// //         data: volumeData.map((entry) => \r\n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume),\r\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n// //         borderColor: 'rgba(54, 162, 235, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //       {\r\n// //         label: 'Put Volume',\r\n// //         data: volumeData.map((entry) => \r\n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume),\r\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n// //         borderColor: 'rgba(255, 99, 132, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   // Function to calculate percentage movement using Greeks\r\n// //   const calculatePriceImpact = (greeks, priceChange) => {\r\n// //     const delta = greeks.delta || 0;\r\n// //     const gamma = greeks.gamma || 0;\r\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <form onSubmit={handleSubmit}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           placeholder=\"Enter Stock Symbol\"\r\n// //           value={symbol}\r\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n// //         />\r\n// //         <button type=\"submit\">Submit</button>\r\n// //       </form>\r\n\r\n// //       {priceData.length > 0 && (\r\n// //         <>\r\n// //           <h2>{symbol} Stock Price</h2>\r\n// //           <Line data={priceChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {volumeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Volume Data</h2>\r\n// //           <Bar data={volumeChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {strikeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Strike Price Data with Greeks</h2>\r\n// //           <ul>\r\n// //             {strikeData.map((strike) => (\r\n// //               <li key={strike.id}>\r\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \r\n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \r\n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\r\n// //               </li>\r\n// //             ))}\r\n// //           </ul>\r\n// //         </>\r\n// //       )}\r\n\r\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\r\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n// //       </button>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default StockTracker;\r\n\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { Line, Bar } from 'react-chartjs-2';\r\n// // import 'chart.js/auto'; // Required for chart.js\r\n\r\n// // const StockTracker = () => {\r\n// //   const [symbol, setSymbol] = useState('');\r\n// //   const [priceData, setPriceData] = useState([]);\r\n// //   const [volumeData, setVolumeData] = useState([]);\r\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\r\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n// //   const handleSubmit = (e) => {\r\n// //     e.preventDefault();\r\n// //     fetchStockData(symbol);\r\n// //   };\r\n\r\n// //   const fetchStockData = async (symbol) => {\r\n// //     try {\r\n// //       const now = new Date();\r\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n// //       const toDate = now.toISOString().split('T')[0];\r\n\r\n// //       // Fetch stock price data\r\n// //       const priceResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n\r\n// //       setPriceData(priceResponse.data.results || []);\r\n\r\n// //       // Fetch volume data for the closest expiry date\r\n// //       const volumeResponse = await axios.get(\r\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n\r\n// //       setVolumeData(volumeResponse.data.results || []);\r\n      \r\n// //     } catch (error) {\r\n// //       console.error('Error fetching stock data:', error);\r\n// //     }\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     if (symbol) {\r\n// //       const interval = setInterval(() => {\r\n// //         fetchStockData(symbol);\r\n// //       }, 1000); // Fetch every second\r\n// //       return () => clearInterval(interval);\r\n// //     }\r\n// //   }, [symbol]);\r\n\r\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\r\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n// //   // Price chart configuration\r\n// //   const priceChart = {\r\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Stock Price',\r\n// //         data: priceData.map((entry) => entry.c),\r\n// //         fill: false,\r\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n// //         borderColor: 'rgba(75,192,192,1)',\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   // Volume chart configuration with updated data based on `toggleVolume`\r\n// //   const volumeChart = {\r\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Call Volume',\r\n// //         data: volumeData.map((entry) =>\r\n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\r\n// //         ),\r\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n// //         borderColor: 'rgba(54, 162, 235, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //       {\r\n// //         label: 'Put Volume',\r\n// //         data: volumeData.map((entry) =>\r\n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\r\n// //         ),\r\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n// //         borderColor: 'rgba(255, 99, 132, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   // Function to calculate percentage movement using Greeks\r\n// //   const calculatePriceImpact = (greeks, priceChange) => {\r\n// //     const delta = greeks.delta || 0;\r\n// //     const gamma = greeks.gamma || 0;\r\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <form onSubmit={handleSubmit}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           placeholder=\"Enter Stock Symbol\"\r\n// //           value={symbol}\r\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n// //         />\r\n// //         <button type=\"submit\">Submit</button>\r\n// //       </form>\r\n\r\n// //       {priceData.length > 0 && (\r\n// //         <>\r\n// //           <h2>{symbol} Stock Price</h2>\r\n// //           <Line data={priceChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {volumeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Volume Data</h2>\r\n// //           <Bar data={volumeChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {strikeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Strike Price Data with Greeks</h2>\r\n// //           <ul>\r\n// //             {strikeData.map((strike) => (\r\n// //               <li key={strike.id}>\r\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \r\n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \r\n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\r\n// //               </li>\r\n// //             ))}\r\n// //           </ul>\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {/* Toggle Button */}\r\n// //       <button onClick={() => setToggleVolume(!toggleVolume)}>\r\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n// //       </button>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default StockTracker;\r\n\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { Line, Bar } from 'react-chartjs-2';\r\n// // import 'chart.js/auto'; // Required for chart.js\r\n\r\n// // const StockTracker = () => {\r\n// //   const [symbol, setSymbol] = useState('');\r\n// //   const [priceData, setPriceData] = useState([]);\r\n// //   const [volumeData, setVolumeData] = useState([]);\r\n// //   const [strikeData, setStrikeData] = useState([]); // For storing strike prices with Greeks\r\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n// //   const handleSubmit = (e) => {\r\n// //     e.preventDefault();\r\n// //     fetchStockData(symbol);\r\n// //   };\r\n\r\n// //   const fetchStockData = async (symbol) => {\r\n// //     try {\r\n// //       const now = new Date();\r\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n// //       const toDate = now.toISOString().split('T')[0];\r\n\r\n// //       // Fetch stock price data\r\n// //       const priceResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n\r\n// //       setPriceData(priceResponse.data.results || []);\r\n\r\n// //       // Fetch volume data for the closest expiry date\r\n// //       const volumeResponse = await axios.get(\r\n// //         `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${symbol}&contract_type=all&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n// //       console.log(volumeResponse.data.results);\r\n\r\n// //       setVolumeData(volumeResponse.data.results || []);\r\n      \r\n// //     } catch (error) {\r\n// //       console.error('Error fetching stock data:', error);\r\n// //     }\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     if (symbol) {\r\n// //       const interval = setInterval(() => {\r\n// //         fetchStockData(symbol);\r\n// //       }, 1000); // Fetch every second\r\n// //       return () => clearInterval(interval);\r\n// //     }\r\n// //   }, [symbol]);\r\n\r\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\r\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n// //   // Price chart configuration\r\n// //   const priceChart = {\r\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Stock Price',\r\n// //         data: priceData.map((entry) => entry.c),\r\n// //         fill: false,\r\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n// //         borderColor: 'rgba(75,192,192,1)',\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   // Volume chart configuration with updated data based on `toggleVolume`\r\n// //   const volumeChart = {\r\n// //     labels: volumeData.map((entry) => new Date(entry.expiration_date).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Call Volume',\r\n// //         data: volumeData.map((entry) =>\r\n// //           toggleVolume ? calculateDollarAmount(entry.call_volume, entry.contract_price) : entry.call_volume\r\n// //         ),\r\n// //         backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n// //         borderColor: 'rgba(54, 162, 235, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //       {\r\n// //         label: 'Put Volume',\r\n// //         data: volumeData.map((entry) =>\r\n// //           toggleVolume ? calculateDollarAmount(entry.put_volume, entry.contract_price) : entry.put_volume\r\n// //         ),\r\n// //         backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n// //         borderColor: 'rgba(255, 99, 132, 1)',\r\n// //         borderWidth: 1,\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n// //   // Function to calculate percentage movement using Greeks\r\n// //   const calculatePriceImpact = (greeks, priceChange) => {\r\n// //     const delta = greeks.delta || 0;\r\n// //     const gamma = greeks.gamma || 0;\r\n// //     return (delta + 0.5 * gamma * priceChange) * 100; // Simplified formula using Delta & Gamma\r\n// //   };\r\n\r\n// //   const handleToggleVolume = () => {\r\n// //     setToggleVolume((prevState) => {\r\n// //       const newToggleState = !prevState;\r\n// //       console.log('Toggle Volume Button Clicked: ', newToggleState);\r\n// //       console.log('Volume Data: ', volumeData);\r\n// //       console.log('Price Data: ', priceData);\r\n// //       return newToggleState;\r\n// //     });\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <form onSubmit={handleSubmit}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           placeholder=\"Enter Stock Symbol\"\r\n// //           value={symbol}\r\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n// //         />\r\n// //         <button type=\"submit\">Submit</button>\r\n// //       </form>\r\n\r\n// //       {/* Display stock price graph */}\r\n// //       {priceData.length > 0 && (\r\n// //         <>\r\n// //           <h2>{symbol} Stock Price</h2>\r\n// //           <Line data={priceChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {/* Display volume/dollar amount graph */}\r\n// //       {volumeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Volume Data</h2>\r\n// //           <Bar data={volumeChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {/* Display strike data */}\r\n// //       {strikeData.length > 0 && (\r\n// //         <>\r\n// //           <h2>Strike Price Data with Greeks</h2>\r\n// //           <ul>\r\n// //             {strikeData.map((strike) => (\r\n// //               <li key={strike.id}>\r\n// //                 Strike: {strike.strike_price}, Delta: {strike.delta}, \r\n// //                 Impact (+1%): {calculatePriceImpact(strike, 0.01)}%, \r\n// //                 Impact (-1%): {calculatePriceImpact(strike, -0.01)}%\r\n// //               </li>\r\n// //             ))}\r\n// //           </ul>\r\n// //         </>\r\n// //       )}\r\n\r\n// //       {/* Toggle button to switch between volume and dollar amount */}\r\n// //       <button onClick={handleToggleVolume}>\r\n// //         {toggleVolume ? 'Show Volume' : 'Show $ Amount'}\r\n// //       </button>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default StockTracker;\r\n\r\n\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { Line, Bar } from 'react-chartjs-2';\r\n// // import 'chart.js/auto'; // Required for chart.js\r\n\r\n// // const StockTracker = () => {\r\n// //   const [symbol, setSymbol] = useState('');\r\n// //   const [priceData, setPriceData] = useState([]);\r\n// //   const [optionData, setOptionData] = useState([]); // For storing option data\r\n// //   const [toggleVolume, setToggleVolume] = useState(false); // Toggles between volume and $ amount\r\n\r\n// //   const handleSubmit = (e) => {\r\n// //     e.preventDefault();\r\n// //     fetchStockData(symbol);\r\n// //   };\r\n// // //   Right now the marrcket is c\r\n// // //   const fetchStockData = async (symbol) => {\r\n// // //     try {\r\n// // //       const now = new Date();\r\n// // //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000); // Fetching last 10 minutes of data\r\n// // //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n// // //       const toDate = now.toISOString().split('T')[0];\r\n  \r\n// // //       // Fetch stock price data\r\n// // //       const priceResponse = await axios.get(\r\n// // //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/${fromDate}/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// // //       );\r\n      \r\n// // //       setPriceData(priceResponse.data.results || []);\r\n// // //     } catch (error) {\r\n// // //       console.error('Error fetching stock data:', error);\r\n// // //     }\r\n// // //   };\r\n  \r\n\r\n// //   const fetchStockData = async (symbol) => {\r\n// //     try {\r\n// //       const now = new Date();\r\n// //       const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n// //       const fromDate = tenMinutesAgo.toISOString().split('T')[0];\r\n// //       const toDate = now.toISOString().split('T')[0];\r\n\r\n// //       // Fetch stock price data\r\n// //       const priceResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/${symbol}/range/1/minute/2024-09-20/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n      \r\n// //       setPriceData(priceResponse.data.results || []);\r\n\r\n// //       // Fetch option data from your provided API URL\r\n// //       const optionResponse = await axios.get(\r\n// //         `https://api.polygon.io/v2/aggs/ticker/O:${symbol}251219C00650000/range/1/day/2024-09-10/${toDate}?adjusted=true&sort=asc&apiKey=_grbZQMP5kasPyiTvmUtApzQ5dapTGSu`\r\n// //       );\r\n\r\n// //       setOptionData(optionResponse.data.results || []); // Store option data\r\n      \r\n// //     } catch (error) {\r\n// //       console.error('Error fetching stock or option data:', error);\r\n// //     }\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     if (symbol) {\r\n// //       const interval = setInterval(() => {\r\n// //         fetchStockData(symbol);\r\n// //       }, 1000); // Fetch every second\r\n// //       return () => clearInterval(interval);\r\n// //     }\r\n// //   }, [symbol]);\r\n\r\n// //   // Function to calculate Dollar Amount based on Volume and Contract Price\r\n// //   const calculateDollarAmount = (volume, contractPrice) => volume * 100 * contractPrice;\r\n\r\n// //   // Price chart configuration\r\n// //   const priceChart = {\r\n// //     labels: priceData.map((entry) => new Date(entry.t).toLocaleTimeString()),\r\n// //     datasets: [\r\n// //       {\r\n// //         label: 'Stock Price',\r\n// //         data: priceData.map((entry) => entry.c),\r\n// //         fill: false,\r\n// //         backgroundColor: 'rgba(75,192,192,0.4)',\r\n// //         borderColor: 'rgba(75,192,192,1)',\r\n// //       },\r\n// //     ],\r\n// //   };\r\n\r\n\r\n\r\n// //   // Function to toggle between showing volume or dollar amount in option chart\r\n// //   const handleToggleVolume = () => {\r\n// //     setToggleVolume((prevState) => !prevState);\r\n// //     console.log('Toggle Volume Button Clicked:', toggleVolume);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <form onSubmit={handleSubmit}>\r\n// //         <input\r\n// //           type=\"text\"\r\n// //           placeholder=\"Enter Stock Symbol\"\r\n// //           value={symbol}\r\n// //           onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n// //         />\r\n// //         <button type=\"submit\">Submit</button>\r\n// //       </form>\r\n\r\n// //       {/* Display stock price graph */}\r\n// //       {priceData.length > 0 && (\r\n// //         <>\r\n// //           <h2>{symbol} Stock Price</h2>\r\n// //           <Line data={priceChart} />\r\n// //         </>\r\n// //       )}\r\n\r\n\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default StockTracker;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto';\r\n\r\n// const StockOptionsTracker = () => {\r\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\r\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\r\n//   const [stockData, setStockData] = useState([]); // Stock price data\r\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\r\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\r\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\r\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\r\n\r\n//   // Fetch stock data and options contracts\r\n//   useEffect(() => {\r\n//     const fetchStockDataAndOptions = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         // Fetch stock data for latest price\r\n//         const stockResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/prev?adjusted=true&apiKey=${polygonApiKey}`\r\n//         );\r\n//         const currentPrice = stockResponse.data.results[0].c;\r\n//         setStockPrice(currentPrice);\r\n\r\n//         // Fetch stock price data for charting\r\n//         const stockPriceResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\r\n//         );\r\n//         setStockData(stockPriceResponse.data.results || []);\r\n\r\n//         // Fetch options contracts for the soonest expiration\r\n//         const optionsResponse = await axios.get(\r\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\r\n//         );\r\n//         const contracts = optionsResponse.data.results || [];\r\n//         console.log(\"Contracts\",contracts);\r\n        \r\n//         // Filter contracts based on strikes around current stock price (±10)\r\n//         const filteredContracts = contracts.filter(\r\n//           (contract) =>\r\n//             contract.expiration_date === '2024-09-27'\r\n//             // && contract.strike_price >= currentPrice - 5 && \r\n//             // contract.strike_price <= currentPrice + 5\r\n//         );\r\n//         console.log(\"Currunet Price\",currentPrice);\r\n//         console.log(\"Filtered Contracts\",filteredContracts);\r\n//         setOptionContracts(filteredContracts);\r\n\r\n//         // Fetch cumulative volume data for each contract\r\n//         const volumes = [];\r\n//         const timeLabels = [];\r\n//         for (let i = 0; i < filteredContracts.length; i++) {\r\n//           const contract = filteredContracts[i];\r\n//           const volumeResponse = await axios.get(\r\n//             `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\r\n//           );\r\n//           const volumeData = volumeResponse.data.results || [];\r\n//           console.log(\"Volume Data\",volumeData);\r\n\r\n//           // Set time labels once (for X-axis)\r\n//           if (i === 0 && volumeData.length > 0) {\r\n//             timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\r\n//           }\r\n\r\n//           // Accumulate the volume for each minute across all contracts\r\n//           volumeData.forEach((item, index) => {\r\n//             volumes[index] = (volumes[index] || 0) + item.v;\r\n//           });\r\n//         }\r\n\r\n//         setCumulativeVolumes(volumes);\r\n//         setTimeLabels(timeLabels);\r\n//       } catch (err) {\r\n//         console.error('Error fetching data:', err);\r\n//         setError('Failed to load data');\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchStockDataAndOptions();\r\n\r\n//     const interval = setInterval(() => {\r\n//       fetchStockDataAndOptions();\r\n//     }, 60000); // Update every 60 seconds\r\n\r\n//     return () => clearInterval(interval);\r\n//   }, [stockSymbol]);\r\n\r\n//   // Helper function to get today’s date\r\n//   const getTodayDate = () => {\r\n//     const today = new Date();\r\n//     return today.toISOString().split('T')[0];\r\n//   };\r\n\r\n//   // Line chart data for stock price\r\n//   const stockChartData = {\r\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//         backgroundColor: 'rgba(75,192,192,0.2)',\r\n//         fill: false,\r\n//         tension: 0.1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Bar chart data for cumulative options volume\r\n//   const optionsVolumeChartData = {\r\n//     labels: timeLabels, // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Cumulative Volume',\r\n//         data: cumulativeVolumes, // Y-axis (volume)\r\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n//         borderColor: 'rgba(75, 192, 192, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h2>Stock and Options Tracker</h2>\r\n\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <label>\r\n//           Stock Symbol:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={stockSymbol}\r\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n//             style={{ marginLeft: '10px' }}\r\n//           />\r\n//         </label>\r\n//       </div>\r\n\r\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n//       </button>\r\n\r\n//       {loading && <p>Loading data...</p>}\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n//       <div style={{ marginTop: '30px' }}>\r\n//         <h3>Stock Price Data for {stockSymbol}</h3>\r\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Expiration Date 2024-09-27</h3>\r\n//         {cumulativeVolumes.length > 0 ? (\r\n//           <Bar data={optionsVolumeChartData} />\r\n//         ) : (\r\n//           <p>No cumulative volume data available</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockOptionsTracker;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto';\r\n\r\n// const StockOptionsTracker = () => {\r\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\r\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\r\n//   const [stockData, setStockData] = useState([]); // Stock price data\r\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\r\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\r\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\r\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\r\n\r\n//   // Fetch stock data and options contracts\r\n//   useEffect(() => {\r\n//     const fetchStockDataAndOptions = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         // Fetch stock data for latest price\r\n//         const stockResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\r\n//         );\r\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\r\n//         setStockPrice(currentPrice);\r\n\r\n//         // Fetch stock price data for charting\r\n//         const stockPriceResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\r\n//         );\r\n//         setStockData(stockPriceResponse.data.results || []);\r\n\r\n//         // Fetch options contracts for the soonest expiration\r\n//         const optionsResponse = await axios.get(\r\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\r\n//         );\r\n//         const contracts = optionsResponse.data.results || [];\r\n\r\n//         // Find the soonest expiration date\r\n//         const soonestExpiryDate = contracts\r\n//           .map(contract => contract.expiration_date)\r\n//           .sort()[0];\r\n\r\n//         console.log(\"Soonest Expiry Date\",soonestExpiryDate);\r\n\r\n//         // Filter contracts based on strikes around current stock price (±10)\r\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\r\n\r\n//     // Find the closest strike price to the current price\r\n//     const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\r\n\r\n//     // Select 10 strikes below and 10 strikes above\r\n//     const start = Math.max(0, closestContractIndex - 10);\r\n//     const end = Math.min(sortedContracts.length, closestContractIndex + 10);\r\n//     const filteredContracts = sortedContracts.slice(start, end);\r\n\r\n//     console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\r\n//     setOptionContracts(filteredContracts);\r\n\r\n//         console.log(\"Currunet Price\",currentPrice);\r\n//         console.log(\"Filtered Contracts\",filteredContracts);\r\n        \r\n\r\n//         // Fetch cumulative volume data for each contract\r\n//         if (filteredContracts.length > 0) {\r\n//             const volumes = [];\r\n//             const timeLabels = [];\r\n//             for (let i = 0; i < filteredContracts.length; i++) {\r\n//               const contract = filteredContracts[i];\r\n//               const volumeResponse = await axios.get(\r\n//                 `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\r\n//               );\r\n//               const volumeData = volumeResponse.data.results || [];\r\n//               console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\r\n      \r\n//               // Set time labels once (for X-axis)\r\n//               if (i === 0 && volumeData.length > 0) {\r\n//                 timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\r\n//               }\r\n      \r\n//               // Accumulate the volume for each minute across all contracts\r\n//               volumeData.forEach((item, index) => {\r\n//                 volumes[index] = (volumes[index] || 0) + item.v;\r\n//               });\r\n//             }\r\n      \r\n//             setCumulativeVolumes(volumes);\r\n//             setTimeLabels(timeLabels);\r\n//             }  else {\r\n//                 console.log(\"No contracts found within the 10 above and below strike price range.\");\r\n//               }\r\n\r\n//       } catch (err) {\r\n//         console.error('Error fetching data:', err);\r\n//         setError('Failed to load data');\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchStockDataAndOptions();\r\n\r\n//     const interval = setInterval(() => {\r\n//       fetchStockDataAndOptions();\r\n//     }, 60000); // Update every 60 seconds\r\n\r\n//     return () => clearInterval(interval);\r\n//   }, [stockSymbol]);\r\n\r\n//   // Helper function to get today’s date\r\n//   const getTodayDate = () => {\r\n//     const today = new Date();\r\n//     return today.toISOString().split('T')[0];\r\n//   };\r\n\r\n//   // Line chart data for stock price\r\n//   const stockChartData = {\r\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//         backgroundColor: 'rgba(75,192,192,0.2)',\r\n//         fill: false,\r\n//         tension: 0.1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Bar chart data for cumulative options volume\r\n//   const optionsVolumeChartData = {\r\n//     labels: timeLabels, // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Cumulative Volume',\r\n//         data: cumulativeVolumes, // Y-axis (volume)\r\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n//         borderColor: 'rgba(75, 192, 192, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h2>Stock and Options Tracker</h2>\r\n\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <label>\r\n//           Stock Symbol:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={stockSymbol}\r\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n//             style={{ marginLeft: '10px' }}\r\n//           />\r\n//         </label>\r\n//       </div>\r\n\r\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n//       </button>\r\n\r\n//       {loading && <p>Loading data...</p>}\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n//       <div style={{ marginTop: '30px' }}>\r\n//         <h3>Stock Price Data for {stockSymbol}</h3>\r\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\r\n//         {cumulativeVolumes.length > 0 ? (\r\n//           <Bar data={optionsVolumeChartData} />\r\n//         ) : (\r\n//           <p>No cumulative volume data available</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockOptionsTracker;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto';\r\n\r\n// const StockOptionsTracker = () => {\r\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\r\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\r\n//   const [stockData, setStockData] = useState([]); // Stock price data\r\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\r\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\r\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\r\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\r\n\r\n//   // Fetch stock data and options contracts\r\n//   useEffect(() => {\r\n//     const fetchStockDataAndOptions = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         // Fetch stock data for latest price\r\n//         const stockResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\r\n//         );\r\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\r\n//         setStockPrice(currentPrice);\r\n\r\n//         // Fetch stock price data for charting\r\n//         const stockPriceResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\r\n//         );\r\n//         setStockData(stockPriceResponse.data.results || []);\r\n\r\n//         // Fetch options contracts for the soonest expiration\r\n//         const optionsResponse = await axios.get(\r\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\r\n//         );\r\n//         const contracts = optionsResponse.data.results || [];\r\n\r\n//         // Find the soonest expiration date\r\n//         const soonestExpiryDate = contracts\r\n//           .map(contract => contract.expiration_date)\r\n//           .sort()[0];\r\n\r\n//         console.log(\"Soonest Expiry Date\", soonestExpiryDate);\r\n\r\n//         // Filter contracts based on strikes around current stock price (±10)\r\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\r\n\r\n//         // Find the closest strike price to the current price\r\n//         const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\r\n\r\n//         // Select 10 strikes below and 10 strikes above\r\n//         const start = Math.max(0, closestContractIndex - 10);\r\n//         const end = Math.min(sortedContracts.length, closestContractIndex + 10);\r\n//         const filteredContracts = sortedContracts.slice(start, end);\r\n\r\n//         console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\r\n//         setOptionContracts(filteredContracts);\r\n\r\n//         console.log(\"Current Price\", currentPrice);\r\n//         console.log(\"Filtered Contracts\", filteredContracts);\r\n\r\n//         // Fetch cumulative volume data for each contract\r\n//         if (filteredContracts.length > 0) {\r\n//           const volumes = [];\r\n//           const timeLabels = [];\r\n//           for (let i = 0; i < filteredContracts.length; i++) {\r\n//             const contract = filteredContracts[i];\r\n//             const volumeResponse = await axios.get(\r\n//               `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\r\n//             );\r\n//             const volumeData = volumeResponse.data.results || [];\r\n//             console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\r\n\r\n//             // Set time labels once (for X-axis)\r\n//             if (i === 0 && volumeData.length > 0) {\r\n//               timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\r\n//             }\r\n\r\n//             // Accumulate the volume for each minute across all contracts\r\n//             volumeData.forEach((item, index) => {\r\n//               volumes[index] = (volumes[index] || 0) + item.v;\r\n//             });\r\n//           }\r\n\r\n//           setCumulativeVolumes(volumes);\r\n//           setTimeLabels(timeLabels);\r\n//         } else {\r\n//           console.log(\"No contracts found within the 10 above and below strike price range.\");\r\n//         }\r\n\r\n//       } catch (err) {\r\n//         console.error('Error fetching data:', err);\r\n//         setError('Failed to load data');\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchStockDataAndOptions();\r\n\r\n//     const interval = setInterval(() => {\r\n//       fetchStockDataAndOptions();\r\n//     }, 60000); // Update every 60 seconds\r\n\r\n//     return () => clearInterval(interval);\r\n//   }, [stockSymbol]);\r\n\r\n//   // Helper function to get today’s date\r\n//   const getTodayDate = () => {\r\n//     const today = new Date();\r\n//     return today.toISOString().split('T')[0];\r\n//   };\r\n\r\n//   // Line chart data for stock price\r\n//   const stockChartData = {\r\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//         backgroundColor: 'rgba(75,192,192,0.2)',\r\n//         fill: false,\r\n//         tension: 0.1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Bar chart data for cumulative options volume\r\n//   const optionsVolumeChartData = {\r\n//     labels: timeLabels, // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Cumulative Volume',\r\n//         data: cumulativeVolumes, // Y-axis (volume)\r\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n//         borderColor: 'rgba(75, 192, 192, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h2>Stock and Options Tracker</h2>\r\n\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <label>\r\n//           Stock Symbol:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={stockSymbol}\r\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n//             style={{ marginLeft: '10px' }}\r\n//           />\r\n//         </label>\r\n//       </div>\r\n\r\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n//       </button>\r\n\r\n//       {loading && <p>Loading data...</p>}\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n//       <div style={{ marginTop: '30px' }}>\r\n//         <h3>Stock Price Data for {stockSymbol}</h3>\r\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\r\n//         {cumulativeVolumes.length > 0 ? (\r\n//           <Bar data={optionsVolumeChartData} />\r\n//         ) : (\r\n//           <p>No cumulative volume data available</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockOptionsTracker;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto';\r\n\r\n// // Black-Scholes Greeks calculations\r\n// const blackScholesGreeks = (S, K, T, r, sigma, optionType) => {\r\n//     const d1 = (Math.log(S / K) + (r + (sigma ** 2) / 2) * T) / (sigma * Math.sqrt(T));\r\n//     const d2 = d1 - sigma * Math.sqrt(T);\r\n//     const phi = (x) => (1 / Math.sqrt(2 * Math.PI)) * Math.exp(-0.5 * x ** 2);\r\n  \r\n//     const delta = optionType === 'call' ? phi(d1) : phi(d1) - 1;\r\n//     return { delta };\r\n//   };\r\n\r\n// const StockOptionsTracker = () => {\r\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\r\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\r\n//   const [stockData, setStockData] = useState([]); // Stock price data\r\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\r\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\r\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\r\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\r\n\r\n//   // Fetch stock data and options contracts\r\n//   useEffect(() => {\r\n//     const fetchStockDataAndOptions = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         // Fetch stock data for latest price\r\n//         const stockResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\r\n//         );\r\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\r\n//         setStockPrice(currentPrice);\r\n\r\n//         // Fetch stock price data for charting\r\n//         const stockPriceResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\r\n//         );\r\n//         setStockData(stockPriceResponse.data.results || []);\r\n\r\n//         // Fetch options contracts for the soonest expiration\r\n//         const optionsResponse = await axios.get(\r\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\r\n//         );\r\n//         const contracts = optionsResponse.data.results || [];\r\n\r\n//         // Find the soonest expiration date\r\n//         const soonestExpiryDate = contracts\r\n//           .map(contract => contract.expiration_date)\r\n//           .sort()[0];\r\n\r\n//         console.log(\"Soonest Expiry Date\", soonestExpiryDate);\r\n\r\n//         // Filter contracts based on strikes around current stock price (±10)\r\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\r\n\r\n//         // Find the closest strike price to the current price\r\n//         const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\r\n\r\n//         // Select 10 strikes below and 10 strikes above\r\n//         const start = Math.max(0, closestContractIndex - 10);\r\n//         const end = Math.min(sortedContracts.length, closestContractIndex + 10);\r\n//         const filteredContracts = sortedContracts.slice(start, end);\r\n\r\n//         console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\r\n//         setOptionContracts(filteredContracts);\r\n\r\n//         console.log(\"Current Price\", currentPrice);\r\n//         console.log(\"Filtered Contracts\", filteredContracts);\r\n\r\n//         // Fetch cumulative volume data for each contract\r\n//         if (filteredContracts.length > 0) {\r\n//           const volumes = [];\r\n//           const timeLabels = [];\r\n//           for (let i = 0; i < filteredContracts.length; i++) {\r\n//             const contract = filteredContracts[i];\r\n//             const volumeResponse = await axios.get(\r\n//               `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\r\n//             );\r\n//             const volumeData = volumeResponse.data.results || [];\r\n//             console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\r\n\r\n//             // Set time labels once (for X-axis)\r\n//             if (i === 0 && volumeData.length > 0) {\r\n//               timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\r\n//             }\r\n\r\n//             // Accumulate the volume for each minute across all contracts\r\n//             volumeData.forEach((item, index) => {\r\n//               volumes[index] = (volumes[index] || 0) + item.v;\r\n//             });\r\n//           }\r\n\r\n//           setCumulativeVolumes(volumes);\r\n//           setTimeLabels(timeLabels);\r\n//         } else {\r\n//           console.log(\"No contracts found within the 10 above and below strike price range.\");\r\n//         }\r\n\r\n//       } catch (err) {\r\n//         console.error('Error fetching data:', err);\r\n//         setError('Failed to load data');\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchStockDataAndOptions();\r\n\r\n//     const interval = setInterval(() => {\r\n//       fetchStockDataAndOptions();\r\n//     }, 60000); // Update every 60 seconds\r\n\r\n//     return () => clearInterval(interval);\r\n//   }, [stockSymbol]);\r\n\r\n//   // Helper function to get today’s date\r\n//   const getTodayDate = () => {\r\n//     const today = new Date();\r\n//     return today.toISOString().split('T')[0];\r\n//   };\r\n\r\n//   // Line chart data for stock price\r\n//   const stockChartData = {\r\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//         backgroundColor: 'rgba(75,192,192,0.2)',\r\n//         fill: false,\r\n//         tension: 0.1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Bar chart data for cumulative options volume\r\n//   const optionsVolumeChartData = {\r\n//     labels: timeLabels, // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Cumulative Volume',\r\n//         data: cumulativeVolumes, // Y-axis (volume)\r\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n//         borderColor: 'rgba(75, 192, 192, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h2>Stock and Options Tracker</h2>\r\n\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <label>\r\n//           Stock Symbol:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={stockSymbol}\r\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n//             style={{ marginLeft: '10px' }}\r\n//           />\r\n//         </label>\r\n//       </div>\r\n\r\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n//       </button>\r\n\r\n//       {loading && <p>Loading data...</p>}\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n//       <div style={{ marginTop: '30px' }}>\r\n//         <h3>Stock Price Data for {stockSymbol}</h3>\r\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\r\n//         {cumulativeVolumes.length > 0 ? (\r\n//           <Bar data={optionsVolumeChartData} />\r\n//         ) : (\r\n//           <p>No cumulative volume data available</p>\r\n//         )}\r\n\r\n        \r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockOptionsTracker;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto';\r\n\r\n// // Black-Scholes Greeks calculations\r\n// const blackScholesGreeks = (S, K, T, r, sigma, optionType) => {\r\n//   const d1 = (Math.log(S / K) + (r + (sigma ** 2) / 2) * T) / (sigma * Math.sqrt(T));\r\n//   const d2 = d1 - sigma * Math.sqrt(T);\r\n//   const phi = (x) => (1 / Math.sqrt(2 * Math.PI)) * Math.exp(-0.5 * x ** 2);\r\n\r\n//   const delta = optionType === 'call' ? phi(d1) : phi(d1) - 1;\r\n//   return { delta };\r\n// };\r\n\r\n// const StockOptionsTracker = () => {\r\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\r\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\r\n//   const [stockData, setStockData] = useState([]); // Stock price data\r\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\r\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\r\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\r\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\r\n\r\n//   // Fetch stock data and options contracts\r\n//   useEffect(() => {\r\n//     const fetchStockDataAndOptions = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         // Fetch stock data for latest price\r\n//         const stockResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\r\n//         );\r\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\r\n//         setStockPrice(currentPrice);\r\n\r\n//         // Fetch stock price data for charting\r\n//         const stockPriceResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\r\n//         );\r\n//         setStockData(stockPriceResponse.data.results || []);\r\n\r\n//         // Fetch options contracts for the soonest expiration\r\n//         const optionsResponse = await axios.get(\r\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\r\n//         );\r\n//         const contracts = optionsResponse.data.results || [];\r\n\r\n//         // Find the soonest expiration date\r\n//         const soonestExpiryDate = contracts\r\n//           .map(contract => contract.expiration_date)\r\n//           .sort()[0];\r\n\r\n//         console.log(\"Soonest Expiry Date\", soonestExpiryDate);\r\n\r\n//         // Filter contracts based on strikes around current stock price (±10)\r\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\r\n\r\n//         // Find the closest strike price to the current price\r\n//         const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\r\n\r\n//         // Select 10 strikes below and 10 strikes above\r\n//         const start = Math.max(0, closestContractIndex - 10);\r\n//         const end = Math.min(sortedContracts.length, closestContractIndex + 10);\r\n//         const filteredContracts = sortedContracts.slice(start, end);\r\n\r\n//         console.log(\"Filtered Contracts (10 above and 10 below):\", filteredContracts); // Log filtered contracts\r\n//         setOptionContracts(filteredContracts);\r\n\r\n//         console.log(\"Current Price\", currentPrice);\r\n//         console.log(\"Filtered Contracts\", filteredContracts);\r\n\r\n//         // Fetch cumulative volume data for each contract\r\n//         if (filteredContracts.length > 0) {\r\n//           const volumes = [];\r\n//           const timeLabels = [];\r\n//           for (let i = 0; i < filteredContracts.length; i++) {\r\n//             const contract = filteredContracts[i];\r\n//             const volumeResponse = await axios.get(\r\n//               `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\r\n//             );\r\n//             const volumeData = volumeResponse.data.results || [];\r\n//             console.log(\"Volume Data for contract\", contract.ticker, volumeData); // Log volume data for each contract\r\n\r\n//             // Set time labels once (for X-axis)\r\n//             if (i === 0 && volumeData.length > 0) {\r\n//               timeLabels.push(...volumeData.map(item => new Date(item.t).toLocaleTimeString()));\r\n//             }\r\n\r\n//             // Accumulate the volume for each minute across all contracts\r\n//             volumeData.forEach((item, index) => {\r\n//               volumes[index] = (volumes[index] || 0) + item.v;\r\n//             });\r\n//           }\r\n\r\n//           setCumulativeVolumes(volumes);\r\n//           setTimeLabels(timeLabels);\r\n//         } else {\r\n//           console.log(\"No contracts found within the 10 above and below strike price range.\");\r\n//         }\r\n\r\n//       } catch (err) {\r\n//         console.error('Error fetching data:', err);\r\n//         setError('Failed to load data');\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchStockDataAndOptions();\r\n\r\n//     const interval = setInterval(() => {\r\n//       fetchStockDataAndOptions();\r\n//     }, 60000); // Update every 60 seconds\r\n\r\n//     return () => clearInterval(interval);\r\n//   }, [stockSymbol]);\r\n\r\n//   // Helper function to get today’s date\r\n//   const getTodayDate = () => {\r\n//     const today = new Date();\r\n//     return today.toISOString().split('T')[0];\r\n//   };\r\n\r\n//   // Line chart data for stock price\r\n//   const stockChartData = {\r\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//         backgroundColor: 'rgba(75,192,192,0.2)',\r\n//         fill: false,\r\n//         tension: 0.1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Bar chart data for cumulative options volume\r\n//   const optionsVolumeChartData = {\r\n//     labels: timeLabels, // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: isDollarMode ? 'Cumulative Dollar Amount' : 'Cumulative Volume',\r\n//         data: cumulativeVolumes.map((volume, index) =>\r\n//           isDollarMode ? volume * 100 * stockPrice : volume\r\n//         ), // Convert to dollar amount if isDollarMode is true\r\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n//         borderColor: 'rgba(75, 192, 192, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h2>Stock and Options Tracker</h2>\r\n\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <label>\r\n//           Stock Symbol:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={stockSymbol}\r\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n//             style={{ marginLeft: '10px' }}\r\n//           />\r\n//         </label>\r\n//       </div>\r\n\r\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n//       </button>\r\n\r\n//       {loading && <p>Loading data...</p>}\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n//       <div style={{ marginTop: '30px' }}>\r\n//         <h3>Stock Price Data for {stockSymbol}</h3>\r\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\r\n//         {cumulativeVolumes.length > 0 ? (\r\n//           <Bar data={optionsVolumeChartData} />\r\n//         ) : (\r\n//           <p>No cumulative volume data available</p>\r\n//         )}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Option Chain with 1% Move Estimation</h3>\r\n//         {optionContracts.length > 0 ? (\r\n//           <table>\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Strike</th>\r\n//                 <th>Call LTP</th>\r\n//                 <th>Put LTP</th>\r\n//                 <th>IV</th>\r\n//                 <th>1% Up Estimation</th>\r\n//                 <th>1% Down Estimation</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {optionContracts.map((contract, index) => {\r\n//                 const T = (new Date(contract.expiration_date).getTime() - new Date().getTime()) / (365 * 24 * 60 * 60 * 1000); // Time to expiration in years\r\n//                 const greeks = blackScholesGreeks(\r\n//                   stockPrice,\r\n//                   parseFloat(contract.strike_price),\r\n//                   T,\r\n//                   0.05, // Assuming 5% risk-free rate\r\n//                   parseFloat(contract.implied_volatility) / 100,\r\n//                   'call'\r\n//                 );\r\n//                 const delta = greeks.delta;\r\n//                 const moveUp = stockPrice * 1.01;\r\n//                 const moveDown = stockPrice * 0.99;\r\n\r\n//                 return (\r\n//                   <tr key={index}>\r\n//                     <td>{contract.strike_price}</td>\r\n//                     <td>{contract.call_last_traded_price}</td>\r\n//                     <td>{contract.put_last_traded_price}</td>\r\n//                     <td>{contract.implied_volatility}%</td>\r\n//                     <td>{moveUp.toFixed(2)}</td>\r\n//                     <td>{moveDown.toFixed(2)}</td>\r\n//                   </tr>\r\n//                 );\r\n//               })}\r\n//             </tbody>\r\n//           </table>\r\n//         ) : (\r\n//           <p>No option contracts available</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockOptionsTracker;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import 'chart.js/auto';\r\n\r\n// // Black-Scholes Greeks calculations\r\n// const blackScholesGreeks = (S, K, T, r, sigma, optionType) => {\r\n//     const d1 = (Math.log(S / K) + (r + (sigma ** 2) / 2) * T) / (sigma * Math.sqrt(T));\r\n//     const d2 = d1 - sigma * Math.sqrt(T);\r\n//     const phi = (x) => (1 / Math.sqrt(2 * Math.PI)) * Math.exp(-0.5 * x ** 2);\r\n  \r\n//     // Greeks calculations\r\n//     const delta = optionType === 'call' ? phi(d1) : phi(d1) - 1;\r\n//     const vega = S * Math.sqrt(T) * phi(d1); // Vega represents the sensitivity to volatility\r\n//     const gamma = phi(d1) / (S * sigma * Math.sqrt(T)); // Gamma for sensitivity to delta changes\r\n  \r\n//     return { delta, gamma, vega };\r\n//   };\r\n  \r\n\r\n// const StockOptionsTracker = () => {\r\n//   const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\r\n//   const [stockPrice, setStockPrice] = useState(0); // Latest stock price\r\n//   const [stockData, setStockData] = useState([]); // Stock price data\r\n//   const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\r\n//   const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\r\n//   const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\r\n//   const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\r\n\r\n//   // Fetch stock data and options contracts\r\n//   useEffect(() => {\r\n//     const fetchStockDataAndOptions = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         // Fetch stock data for latest price\r\n//         const stockResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\r\n//         );\r\n//         const currentPrice = stockResponse.data.ticker.lastTrade.p;\r\n//         setStockPrice(currentPrice);\r\n\r\n//         // Fetch stock price data for charting\r\n//         const stockPriceResponse = await axios.get(\r\n//           `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-20/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\r\n//         );\r\n//         setStockData(stockPriceResponse.data.results || []);\r\n\r\n//         // Fetch options contracts for the soonest expiration\r\n//         const optionsResponse = await axios.get(\r\n//           `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\r\n//         );\r\n//         const contracts = optionsResponse.data.results || [];\r\n\r\n//         // Find the soonest expiration date\r\n//         const soonestExpiryDate = contracts\r\n//           .map(contract => contract.expiration_date)\r\n//           .sort()[0];\r\n\r\n//         // Filter contracts based on strikes around current stock price (±10)\r\n//         const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\r\n\r\n//         // Find the closest strike price to the current price\r\n//         const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\r\n\r\n//         // Select 10 strikes below and 10 strikes above\r\n//         const start = Math.max(0, closestContractIndex - 10);\r\n//         const end = Math.min(sortedContracts.length, closestContractIndex + 10);\r\n//         const filteredContracts = sortedContracts.slice(start, end);\r\n\r\n//         setOptionContracts(filteredContracts);\r\n\r\n//         // Fetch cumulative volume data for each contract\r\n//         if (filteredContracts.length > 0) {\r\n//             const volumes = [];\r\n//             let timeLabels = [];\r\n          \r\n//             try {\r\n//               // Create an array of promises to fetch the volume data for all contracts concurrently\r\n//               const volumePromises = filteredContracts.map(async (contract, index) => {\r\n//                 const volumeResponse = await axios.get(\r\n//                   `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\r\n//                 );\r\n          \r\n//                 const volumeData = volumeResponse.data.results || [];\r\n          \r\n//                 // Set time labels only for the first contract's volume data\r\n//                 if (index === 0 && volumeData.length > 0) {\r\n//                   timeLabels = volumeData.map(item => new Date(item.t).toLocaleTimeString());\r\n//                 }\r\n          \r\n//                 // Return the volume data for further processing\r\n//                 return volumeData;\r\n//               });\r\n          \r\n//               // Wait for all the promises to resolve concurrently\r\n//               const resolvedVolumes = await Promise.all(volumePromises);\r\n          \r\n//               // Process the resolved volume data and accumulate volumes per minute\r\n//               resolvedVolumes.forEach(volumeData => {\r\n//                 volumeData.forEach((item, index) => {\r\n//                   volumes[index] = (volumes[index] || 0) + item.v;\r\n//                 });\r\n//               });\r\n          \r\n//               // Update the state with accumulated volumes and time labels\r\n//               setCumulativeVolumes(volumes);\r\n//               setTimeLabels(timeLabels);\r\n          \r\n//             } catch (error) {\r\n//               console.error('Error fetching cumulative volume data:', error);\r\n//             }\r\n//           }\r\n          \r\n//       } catch (err) {\r\n//         console.error('Error fetching data:', err);\r\n//         setError('Failed to load data');\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchStockDataAndOptions();\r\n\r\n//     const interval = setInterval(() => {\r\n//       fetchStockDataAndOptions();\r\n//     }, 60000); // Update every 60 seconds\r\n\r\n//     return () => clearInterval(interval);\r\n//   }, [stockSymbol]);\r\n\r\n//   // Helper function to get today’s date\r\n//   const getTodayDate = () => {\r\n//     const today = new Date();\r\n//     return today.toISOString().split('T')[0];\r\n//   };\r\n\r\n//   // Line chart data for stock price\r\n//   const stockChartData = {\r\n//     labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()), // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: 'Stock Price',\r\n//         data: stockData.map((item) => item.c), // Y-axis (stock price)\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//         backgroundColor: 'rgba(75,192,192,0.2)',\r\n//         fill: false,\r\n//         tension: 0.1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Bar chart data for cumulative options volume\r\n//   const optionsVolumeChartData = {\r\n//     labels: timeLabels, // X-axis (time)\r\n//     datasets: [\r\n//       {\r\n//         label: isDollarMode ? 'Cumulative Dollar Amount' : 'Cumulative Volume',\r\n//         data: cumulativeVolumes.map((volume, index) =>\r\n//           isDollarMode ? volume * 100 * stockPrice : volume\r\n//         ), // Convert to dollar amount if isDollarMode is true\r\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n//         borderColor: 'rgba(75, 192, 192, 1)',\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px' }}>\r\n//       <h2>Stock and Options Tracker</h2>\r\n\r\n//       <div style={{ marginBottom: '20px' }}>\r\n//         <label>\r\n//           Stock Symbol:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={stockSymbol}\r\n//             onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n//             style={{ marginLeft: '10px' }}\r\n//           />\r\n//         </label>\r\n//       </div>\r\n\r\n//       <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n//         {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n//       </button>\r\n\r\n//       {loading && <p>Loading data...</p>}\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n//       <div style={{ marginTop: '30px' }}>\r\n//         <h3>Stock Price Data for {stockSymbol}</h3>\r\n//         {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\r\n//         {cumulativeVolumes.length > 0 ? (\r\n//           <Bar data={optionsVolumeChartData} />\r\n//         ) : (\r\n//           <p>No cumulative volume data available</p>\r\n//         )}\r\n\r\n//         <h3 style={{ marginTop: '40px' }}>Option Chain with 1% Move Estimation</h3>\r\n//         {optionContracts.length > 0 ? (\r\n//           <table>\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Strike</th>\r\n//                 <th>IV</th>\r\n//                 <th>1% Up Estimation</th>\r\n//                 <th>1% Down Estimation</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {optionContracts.map((contract, index) => {\r\n//                 const T = (new Date(contract.expiration_date).getTime() - new Date().getTime()) / (365 * 24 * 60 * 60 * 1000); // Time to expiration in years\r\n//                 const greeks = blackScholesGreeks(\r\n//                   stockPrice,\r\n//                   parseFloat(contract.strike_price),\r\n//                   T,\r\n//                   0.05, // Assuming 5% risk-free rate\r\n//                   contract.iv / 100,\r\n//                   contract.option_type\r\n//                 );\r\n\r\n//                 return (\r\n//                   <tr key={index}>\r\n//                     <td>{contract.strike_price}</td>\r\n//                     <td>{contract.iv}</td>\r\n//                     <td>{(greeks.delta * 1.01).toFixed(2)}</td>\r\n//                     <td>{(greeks.delta * 0.99).toFixed(2)}</td>\r\n//                   </tr>\r\n//                 );\r\n//               })}\r\n//             </tbody>\r\n//           </table>\r\n//         ) : (\r\n//           <p>No options contracts data available</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StockOptionsTracker;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\n\r\nconst StockOptionsTracker = () => {\r\n  const [stockSymbol, setStockSymbol] = useState('AAPL'); // Default stock symbol\r\n  const [stockPrice, setStockPrice] = useState(0); // Latest stock price\r\n  const [stockData, setStockData] = useState([]); // Stock price data\r\n  const [optionContracts, setOptionContracts] = useState([]); // Option contracts data\r\n  const [cumulativeVolumes, setCumulativeVolumes] = useState([]); // Cumulative volume data\r\n  const [timeLabels, setTimeLabels] = useState([]); // X-axis labels (time)\r\n  const [isDollarMode, setIsDollarMode] = useState(false); // Toggle between volume and dollar amount\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [strikeData, setStrikeData] = useState([]); // New: Strike data with volume, Greeks\r\n  const polygonApiKey = '_grbZQMP5kasPyiTvmUtApzQ5dapTGSu'; // Replace with your API key\r\n\r\n  // Fetch stock data and options contracts (This section is unchanged)\r\n  useEffect(() => {\r\n    const fetchStockDataAndOptions = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const stockResponse = await axios.get(\r\n          `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${stockSymbol}?apiKey=${polygonApiKey}`\r\n        );\r\n        const currentPrice = stockResponse.data.ticker.lastTrade.p;\r\n        setStockPrice(currentPrice);\r\n\r\n        const stockPriceResponse = await axios.get(\r\n          `https://api.polygon.io/v2/aggs/ticker/${stockSymbol}/range/1/minute/2024-09-20/${getTodayDate()}?adjusted=true&sort=asc&apiKey=${polygonApiKey}`\r\n        );\r\n        setStockData(stockPriceResponse.data.results || []);\r\n\r\n        const optionsResponse = await axios.get(\r\n          `https://api.polygon.io/v3/reference/options/contracts?underlying_ticker=${stockSymbol}&apiKey=${polygonApiKey}`\r\n        );\r\n        const contracts = optionsResponse.data.results || [];\r\n\r\n        const soonestExpiryDate = contracts\r\n          .map(contract => contract.expiration_date)\r\n          .sort()[0];\r\n\r\n        const sortedContracts = contracts.sort((a, b) => parseFloat(a.strike_price) - parseFloat(b.strike_price));\r\n        const closestContractIndex = sortedContracts.findIndex(contract => parseFloat(contract.strike_price) >= currentPrice);\r\n        const start = Math.max(0, closestContractIndex - 10);\r\n        const end = Math.min(sortedContracts.length, closestContractIndex + 10);\r\n        const filteredContracts = sortedContracts.slice(start, end);\r\n\r\n        setOptionContracts(filteredContracts);\r\n\r\n        if (filteredContracts.length > 0) {\r\n            const volumes = [];\r\n            let timeLabels = [];\r\n\r\n            try {\r\n              const volumePromises = filteredContracts.map(async (contract, index) => {\r\n                const volumeResponse = await axios.get(\r\n                  `https://api.polygon.io/v2/aggs/ticker/${contract.ticker}/range/1/minute/2024-09-10/${getTodayDate()}?adjusted=true&apiKey=${polygonApiKey}`\r\n                );\r\n                const volumeData = volumeResponse.data.results || [];\r\n\r\n                if (index === 0 && volumeData.length > 0) {\r\n                  timeLabels = volumeData.map(item => new Date(item.t).toLocaleTimeString());\r\n                }\r\n                return volumeData;\r\n              });\r\n\r\n              const resolvedVolumes = await Promise.all(volumePromises);\r\n              resolvedVolumes.forEach(volumeData => {\r\n                volumeData.forEach((item, index) => {\r\n                  volumes[index] = (volumes[index] || 0) + item.v;\r\n                });\r\n              });\r\n\r\n              setCumulativeVolumes(volumes);\r\n              setTimeLabels(timeLabels);\r\n\r\n            } catch (error) {\r\n              console.error('Error fetching cumulative volume data:', error);\r\n            }\r\n          }\r\n\r\n        // New: Fetching Greeks and Volume for Strike Prices (Call and Put) for nearest expiry\r\n        const strikeResponse = await axios.get(\r\n          `https://api.polygon.io/v3/snapshot/options/${stockSymbol}?apiKey=${polygonApiKey}`\r\n        );\r\n        console.log(\"Strike Response\", strikeResponse.data);\r\n        const strikeContracts = strikeResponse.data.results || [];\r\n        console.log(\"Strike Contracts\", strikeContracts);\r\n\r\n        console.log(\"Soonest Expiry Date\", soonestExpiryDate);\r\n        // Filter for the nearest expiry and prepare for chart\r\n        const processedStrikeData = strikeContracts\r\n          .filter(contract => contract.expiration_date === soonestExpiryDate)\r\n          .map(contract => ({\r\n            strikePrice: contract.strike_price,\r\n            callVolume: contract.greeks.call_volume,\r\n            putVolume: contract.greeks.put_volume,\r\n            delta: contract.greeks.delta,\r\n          }));\r\n        console.log(\"Processed Strike Data\", processedStrikeData);\r\n\r\n        setStrikeData(processedStrikeData);\r\n\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n        setError('Failed to load data');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchStockDataAndOptions();\r\n\r\n    const interval = setInterval(() => {\r\n      fetchStockDataAndOptions();\r\n    }, 60000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [stockSymbol]);\r\n\r\n  // Helper function to get today’s date\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    return today.toISOString().split('T')[0];\r\n  };\r\n\r\n  // Line chart data for stock price (This section is unchanged)\r\n  const stockChartData = {\r\n    labels: stockData.map((item) => new Date(item.t).toLocaleTimeString()),\r\n    datasets: [\r\n      {\r\n        label: 'Stock Price',\r\n        data: stockData.map((item) => item.c),\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        backgroundColor: 'rgba(75,192,192,0.2)',\r\n        fill: false,\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Bar chart data for cumulative options volume (This section is unchanged)\r\n  const optionsVolumeChartData = {\r\n    labels: timeLabels,\r\n    datasets: [\r\n      {\r\n        label: isDollarMode ? 'Cumulative Dollar Amount' : 'Cumulative Volume',\r\n        data: cumulativeVolumes.map((volume, index) =>\r\n          isDollarMode ? volume * 100 * stockPrice : volume\r\n        ),\r\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // New: Bar chart data for strike price call/put volumes\r\n  const strikeVolumeChartData = {\r\n    labels: strikeData.map((item) => item.strikePrice),\r\n    datasets: [\r\n      {\r\n        label: 'Call Volume',\r\n        data: strikeData.map((item) => item.callVolume),\r\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n      },\r\n      {\r\n        label: 'Put Volume',\r\n        data: strikeData.map((item) => item.putVolume),\r\n        backgroundColor: 'rgba(255, 99, 132, 0.6)',\r\n      },\r\n    ],\r\n  };\r\n\r\n  // New: Table to show % price change prediction using Delta\r\n  const deltaChangeTable = strikeData.map((item, index) => (\r\n    <tr key={index}>\r\n      <td>{item.strikePrice}</td>\r\n      <td>{(item.delta * 0.01).toFixed(2)}%</td>\r\n    </tr>\r\n  ));\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Stock and Options Tracker</h2>\r\n\r\n      <div style={{ marginBottom: '20px' }}>\r\n        <label>\r\n          Stock Symbol:\r\n          <input\r\n            type=\"text\"\r\n            value={stockSymbol}\r\n            onChange={(e) => setStockSymbol(e.target.value.toUpperCase())}\r\n            style={{ marginLeft: '10px' }}\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <button onClick={() => setIsDollarMode(!isDollarMode)}>\r\n        {isDollarMode ? 'Switch to Volume' : 'Switch to Dollar Amount'}\r\n      </button>\r\n\r\n      {loading && <p>Loading data...</p>}\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n      <div style={{ marginTop: '30px' }}>\r\n        <h3>Stock Price Data for {stockSymbol}</h3>\r\n        {stockData.length > 0 ? <Line data={stockChartData} /> : <p>No stock data available</p>}\r\n\r\n        <h3 style={{ marginTop: '40px' }}>Options Cumulative Volume for Nearest Expiry</h3>\r\n        {cumulativeVolumes.length > 0 ? (\r\n          <Bar data={optionsVolumeChartData} />\r\n        ) : (\r\n          <p>No cumulative volume data available</p>\r\n        )}\r\n\r\n        {/* New: Strike price bar chart for puts and calls */}\r\n        <h3 style={{ marginTop: '40px' }}>Strike Price Volumes (Puts and Calls)</h3>\r\n        {strikeData.length > 0 ? (\r\n          <Bar data={strikeVolumeChartData} />\r\n        ) : (\r\n          <p>No strike volume data available</p>\r\n        )}\r\n\r\n        {/* New: Delta percentage change table */}\r\n        <h3 style={{ marginTop: '40px' }}>Price Change Predictions (Based on 1% Stock Price Movement)</h3>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Strike Price</th>\r\n              <th>% Change (1% Stock Move)</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {deltaChangeTable}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockOptionsTracker;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}